

// === .env ===



// === .vscode\launch.json ===

{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "Launch Program",
            "skipFiles": ["<node_internals>/**"],
            "cwd": "${workspaceFolder}/BackEnd",
            "program": "${workspaceFolder}/BackEnd/server.js"
        }
    ]
}


// === .vscode\settings.json ===

{
    "liveServer.settings.port": 5502,
    "eslint.options": {
        "plugins": ["import"],
        "rules": {
          "import/no-unresolved": 2,
          "import/no-commonjs": 2,
          "import/extensions": [2, "ignorePackages"]
        }
    },
    "eslint.codeActionsOnSave.rules": null,
    
}

// === BackEnd\.env ===

REMOVED_JWT_SECRET=oQQMGP1XCJq0puu8BBmXsAEdyqZif95scJ9HzgrqFEE
REMOVED_RBM_MONITER_API = http://10.10.111.3:4000/remoteminers

DB_USER=postgres
DB_HOST=localhost
DB_NAME=node_watchman_db
DB_PASSWORD=postgres
DB_PORT=5432


// === BackEnd\app.js ===

import express from 'express';
const app = express();
import cors from "cors";


import router from './router.js';

app.use(cors()); // Enable CORS for all routes
app.use(express.json({ limit: '50mb' }));

app.use('/', router);

app.get('/', (req, res) => {
  res.send('hello from express server');
});

export default app;

// === BackEnd\auth\auth.js ===

import { promises as fs } from 'fs';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import rateLimit from 'express-rate-limit';
import nodemailer from 'nodemailer';

// Nodemailer transporter setup
const transporter = nodemailer.createTransport({
    service: 'Gmail',
    auth: {
      user: 'datacare234@gmail.com', // Your email address
      pass: 'uftx faiu skyc babj' // Your email password
    }
  });

const limiter = rateLimit({
    windowMs: 1 * 60 * 1000, // 1 minute
    max: 3, // Limit to 3 requests per window
    handler: function (req, res /*, next */) {
      const resetTime = new Date(parseInt(res.getHeaders()["x-ratelimit-reset"]) * 1000);
      const currentTime = new Date();
      const timeToWait = Math.ceil((resetTime - currentTime) / 1000); // Time in seconds
      res.status(429).json({
        message: `Too many requests. Please try again in ${timeToWait} seconds.`
      });
    }
  });
  let tokenBlacklist = {};

function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    console.log(token)

    if (token == null) return res.status(401).send('Token is required');

    jwt.verify(token, REMOVED_JWT_SECRET, (err, user) => {
        if (err) return res.status(403).send('Token is invalid or expired');
        req.user = user;
        next();
    });
}

function checkAdmin(req, res, next) {
    // Assumes req.user is set by authenticateToken
    if (!req.user || !req.user.isAdmin) {
        return res.status(403).send('Access denied');
    }
    next(); // User is admin, proceed to the next middleware
}


function blacklistToken(token) {
    // Assume the token has a certain expiration time, e.g., 1 hour
    const EXPIRY_TIME_IN_MS = 3600 * 1000; // 1 hour in milliseconds

    // Add the token to the blacklist
    tokenBlacklist[token] = true;

    // Set a timeout to remove the token from the blacklist after it expires
    setTimeout(() => {
        delete tokenBlacklist[token];
    }, EXPIRY_TIME_IN_MS);
}

function checkBlacklist(req, res, next) {
    const authHeader = req.headers['authorization'];
    if (!authHeader) {
        return res.status(401).send('No token provided');
    }

    const token = authHeader.split(' ')[1];
    if (tokenBlacklist[token]) {
        return res.status(401).send('Token has been invalidated');
    }

    next();
}

// Function to ensure a file exists, and create it with default content if it doesn't
async function ensureFileExists(filePath, defaultContent) {
    try {
        const fileExists = await fs.access(filePath).then(() => true).catch(() => false);
        if (!fileExists) {
            await fs.writeFile(filePath, defaultContent);
        }
    } catch (err) {
        console.error(`Error ensuring file exists: ${filePath}`, err);
    }
}



async function createAdminUser() {
    const email = 'bradenacurtis801@gmail.com';
    const username = 'bradenacurtis801';
    const password = 'wpkf0224'; // Choose a strong, secure password
    const hashedPassword = await bcrypt.hash(password, 10);

    const User = {
        email,
        username,
        hashedPassword,
        isAdmin: true
    };

    // Attempt to read the existing admins file
    let users;
    try {
        const data = await fs.readFile(USERS_FILE, 'utf8');
        users = JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            // File does not exist, start with an empty array
            users = [];
        } else {
            // Rethrow any other error
            throw error;
        }
    }

    // Check if the admin user already exists
    const existingUser = users.find(users => users.email === email);
    if (existingUser) {
        console.log('User already exists.');
        return; // Stop execution if the admin already exists
    }

    // Add the new admin user to the array
    users.push(User);

    // Save the updated admins array back to the file
    await fs.writeFile(USERS_FILE, JSON.stringify(users, null, 2));

    console.log('Admin user created successfully.');
}

//   createAdminUser().catch(console.error);

export default { authenticateToken, checkAdmin, checkBlacklist, blacklistToken }

// === BackEnd\db\db.js ===

// db.js

import pg from 'pg';
import dotenv from 'dotenv';

dotenv.config({ path: '../.env' });

const { Pool } = pg; // Destructure Pool from pg

const pool = new Pool({
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_NAME,
    password: process.env.DB_PASSWORD,
    port: process.env.DB_PORT, // PostgreSQL default port
    ssl: false // Set to true if using SSL
});

export default pool;


// === BackEnd\db\import_dc02_postgres.js ===

import fs from 'fs';
import pool from "./db.js";
import dotenv from 'dotenv';
dotenv.config({ path: '../.env' })



// Read JSON data from file
const jsonData = fs.readFileSync('interactive_nodes.json', 'utf8');

// Parse JSON data into JavaScript objects
const data = JSON.parse(jsonData);

// Function to insert data into the PostgreSQL database
async function insertData() {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');

        // Insert data into the database
        for (const entry of data) {
            const machineId = Object.keys(entry)[0]; // Extract machine_id
            const status = JSON.stringify(entry[machineId]); // Convert status to JSON string
            await client.query('INSERT INTO machine_status (machine_id, data) VALUES ($1, $2)', [machineId, status]);
        }

        await client.query('COMMIT');
        console.log('Data inserted successfully');
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('Error inserting data:', error);
    } finally {
        client.release();
        await pool.end();
    }
}

// Call the function to insert data
insertData();


// === BackEnd\db\migrations\createTables.js ===

export const createApprovalTable = `
CREATE TABLE IF NOT EXISTS public.approvals (
    approval_id integer NOT NULL,
    user_id integer,
    admin_user_id integer,
    approval_status character varying(20),
    approval_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);
`
export const createDC02Table = `
CREATE TABLE IF NOT EXISTS public.dc02_hardware (
    machine_id character varying(20) NOT NULL,
    status jsonb
);
`
export const createMachineStatusTable = `
CREATE TABLE IF NOT EXISTS public.machine_status (
    machine_id character varying(20) NOT NULL,
    status jsonb
);
`
export const createLoginMethodTable = `
CREATE TABLE IF NOT EXISTS public.login_methods (
    login_id integer NOT NULL,
    user_id integer,
    login_method character varying(20),
    login_identifier character varying(255)
);
`
export const createUsersTable = `
CREATE TABLE IF NOT EXISTS public.users (
    user_id integer NOT NULL,
    username character varying(255),
    email character varying(255),
    phone_number character varying(20),
    password_hash character varying(255),
    status character varying(20) DEFAULT 'pending'::character varying,
    role character varying(20) DEFAULT 'user'::character varying
);
`

export default [createApprovalTable, createDC02Table, createMachineStatusTable, createLoginMethodTable, createUsersTable]

// === BackEnd\db\migrations\index.js ===

import db from '../db.js';
import { createApprovalTable, createDC02Table, createMachineStatusTable, createLoginMethodTable, createUsersTable } from './createTables.js';

const runDbMigrations = async () => {
    console.log('BEGIN DB MIGRATION');
  
    // Use single client for transactions
    const client = await db.connect();
  
    try {
        await client.query('BEGIN'); // Begin transaction
  
        // Execute table creation queries
        await client.query(createApprovalTable);
        await client.query(createDC02Table);
        await client.query(createMachineStatusTable);
        await client.query(createLoginMethodTable);
        await client.query(createUsersTable);
  
        await client.query('COMMIT'); // Commit transaction
        console.log('END DB MIGRATION');
    } catch (e) {
        await client.query('ROLLBACK'); // Rollback transaction
        console.log('DB migration failed:', e.message);
        throw e; // Rethrow the error to handle it elsewhere if needed
    } finally {
        client.release(); // Release the client back to the pool
    }
};

export default runDbMigrations;


// === BackEnd\docker-compose.yml ===

version: '3.8'
services:
  db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db_dump:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
volumes:
  postgres-data:

# docker-compose --env-file .env up -d
# run in admin powershell. 
# Get-Process | Where-Object { $_.ProcessName -like "postgres*" } | Stop-Process -Force
# pg_restore --dbname=node_watchman_db --username=postgres --no-password < node_watchman_db.dump
# $ProcessUsingPort = Get-NetTCPConnection -LocalPort 5432 | Select-Object -ExpandProperty OwningProcess
# Get-Process -Id $ProcessUsingPort | Select-Object Id, ProcessName
# Stop-Process -Id $ProcessUsingPort -Force


// === BackEnd\router.js ===

import { Router } from "express";
import authenticateToken from "./auth/auth.js";
import fs from "fs/promises"; // Import fs using promise-based API
import bcrypt from "bcrypt";
import dotenv from "dotenv";
dotenv.config({ path: './.env' })
import jwt from "jsonwebtoken";
import pool from "./db/db.js";
import { generateUpdateList } from "./utils/utils.js";

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

const REMOVED_JWT_SECRET = process.env.REMOVED_JWT_SECRET;
const router = Router();

router.post("/update-machine-state", async (req, res) => {
  const updatedStates = req.body; // Directly use req.body as it contains the updated machine states

  // Validate the updatedStates to ensure it's not empty and is an array
  if (!Array.isArray(updatedStates) || updatedStates.length === 0) {
      console.log('Invalid or empty updated states provided');
      return res.status(400).send('Invalid or empty updated states provided');
  }

  try {
      const client = await pool.connect();
      
      // Load the current machine states from your database or a file
      // For this example, let's assume you're loading it from a JSON file as before
      const currentData = await fs.readFile('path/to/your/currentStates.json', 'utf8');
      const currentStates = JSON.parse(currentData);
      
      // Use generateUpdateList to identify what needs to be updated
      const updatesNeeded = await generateUpdateList(currentStates, updatedStates);

      // Iterate over updatesNeeded and update the database
      for (const update of updatesNeeded) {
          const machineId = update.machineId; // Assuming each update includes a machineId
          const newData = update.data; // And the new data

          // Perform your database update logic here
          console.log(`Updating record for machine ID: ${machineId}`);
          await client.query('UPDATE machine_status SET data = $1 WHERE machine_id = $2', [JSON.stringify(newData), machineId]);
      }

      client.release(); // Release the client back to the pool

      // Respond with a success message
      res.json({ status: 'success', message: `${updatesNeeded.length} machines updated successfully.` });
  } catch (error) {
      console.error('Error updating machine state:', error);
      res.status(500).send('Error processing request');
  }
});


router.get('/load-machine-state', async (req, res) => {
  try {
      const client = await pool.connect();
      const queryResult = await client.query('SELECT * FROM machine_status');
      const jsonData = queryResult.rows;
      client.release(); // Release the client back to the pool

      res.json(jsonData);
  } catch (err) {
      console.error('Error:', err);
      res.status(500).send('Error loading machine status');
  }
});


router.get('/dc02-hardware-info', async (req, res) => {
  try {
      const client = await pool.connect();
      const queryResult = await client.query('SELECT * FROM dc02_hardware');
      const jsonData = queryResult.rows;
      client.release(); // Release the client back to the pool

      res.json(jsonData);
  } catch (err) {
      console.error('Error:', err);
      res.status(500).send('Error loading machine status');
  }
});

// Registration endpoint
router.post("/register", async (req, res) => {
  const result = "NOT IMPLEMENTED";
  res.status(201).json(result);
});

// Approval endpoint
router.get("/approve/:id", async (req, res) => {
  const result = "NOT IMPLEMENTED";
  res.status(201).json(result);
});

// Login route
router.post("/login", async (req, res) => {
  const { loginIdentifier, password } = req.body;

  try {
    // Query the login_methods table to find the user_id associated with the login identifier
    const loginMethodResult = await pool.query(
      "SELECT user_id FROM login_methods WHERE login_identifier = $1",
      [loginIdentifier]
    );
    const loginMethod = loginMethodResult.rows[0];

    // Check if login identifier exists
    if (!loginMethod) {
      return res.status(404).json({ error: "User not found" });
    }

    // Query the users table to retrieve user information
    const userResult = await pool.query(
      "SELECT * FROM users WHERE user_id = $1",
      [loginMethod.user_id]
    );
    const user = userResult.rows[0];

    // DEBUGGING LINE //////////////////////////////////////
    // console.log(user)
    // console.log(password)
    ////////////////////////////////////////////////////////
    
    // Check password
    const isPasswordValid = await bcrypt.compare(password, user.password_hash);
    if (!isPasswordValid) {
      return res.status(401).json({ error: "Invalid password" });
    }

    // Sign a token. Include a flag in the token payload to indicate if the user is an admin
    const token = jwt.sign(
      { userId: user.user_id, isAdmin: user.is_admin || false },
      REMOVED_JWT_SECRET,
      { expiresIn: "9999 years" }
    );

    // Respond with JWT token and user information
    res.status(200).json({ token, user });
  } catch (error) {
    console.error("Error logging in:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

router.post("/admin/revoke", async (req, res) => {
  const result = "NOT IMPLEMENTED";
  res.status(201).json(result);
});

// API endpoint to handle logout
router.post("/logout", (req, res) => {
  const token = req.headers["authorization"].split(" ")[1];
  blacklistToken(token);
  res.send("Logged out successfully");
});




export default router;


// === BackEnd\server.js ===

// CHECK IF COMPUTER OS IS COMPATIBLE
//////////////////////////////////////////////////
import checkOS from '../Utils/chk_os.js';

checkOS();
//////////////////////////////////////////////////
console.log("Current Working Directory:", process.cwd());

import 'dotenv/config';
import app from './app.js';
import runDbMigrations from './db/migrations/index.js';
import config from '../Config/config.js';
async function start() {
    await runDbMigrations();
    app.listen(config.BACKEND_SERVER_PORT, '0.0.0.0', () => console.log(`Server started on port ${config.BACKEND_SERVER_PORT}`));
}

start();

// === BackEnd\utils\utils.js ===

import { isEqual } from 'lodash-es';

/**
 * Compares two arrays of machine states (current and updated) and generates a list of updates needed.
 * 
 * This function assumes that each element in the input arrays represents the state of a machine at the same index,
 * allowing for direct comparison using the array index. It checks for differences between the current and updated 
 * states of each machine and returns a list of the updated machine states that differ from their current states.
 *
 * @param {string} currentData - A JSON string representing an array of the current states of machines.
 * @param {string} updatedData - A JSON string representing an array of the updated states of machines.
 * @returns {Array} updatesNeeded - An array of updated machine states that differ from the current states.
 *
 * Note: It's crucial for both `currentStates` and `updatedStates` to be arrays of the same length,
 * with corresponding indices representing the same machine.
 */
async function generateUpdateList(currentData, updatedData) {
    const currentStates = JSON.parse(currentData);
    const updatedStates = JSON.parse(updatedData);
    const updatesNeeded = [];

    // Ensure both arrays are of the same length to avoid errors
    if (currentStates.length !== updatedStates.length) {
        console.error("The current and updated states arrays do not match in length.");
        return updatesNeeded;
    }

    // Iterate over the arrays using index
    for (let i = 0; i < currentStates.length; i++) {
        const currentMachineState = currentStates[i];
        const updatedMachineState = updatedStates[i];

        // If data has changed
        if (!isEqual(currentMachineState, updatedMachineState)) {
            // Assuming the structure includes a machineId field or similar to identify the machine
            updatesNeeded.push(updatedMachineState);
        }
    }

    return updatesNeeded;
}

export default { generateUpdateList }

// === BashScripts\createTestContainers.sh ===

#!/bin/bash

# Function to create a rack of 20 Docker containers with specified IP addresses
create_rack() {
    local rackNumber=$1
    echo "Creating rack with rack number: $rackNumber"
    for ((i=1; i<=20; i++)); do
    (    local ip="10.10.$rackNumber.$i"
        echo "Creating container with IP: $ip"
        docker run -d --rm --name "machine${rackNumber}_$i" \
            --network test-network-10.10/16 --ip $ip my_ssh_server
    ) &
    done
    echo "Rack $rackNumber creation completed."
}

# Function to loop through rack numbers and create racks
create_racks_from_list() {
    local rackNumbers='
    11
    12
    13
    14
    21
    22
    23
    24
    25
    111
    112
    113
    121
    122
    123
    124
    125
    '

    for rackNumber in $rackNumbers; do
        if [[ ! -z "$rackNumber" ]]; then # Check if the rack number is not empty
            (
                create_rack $rackNumber
            ) &
        fi
    done
}

# Function to dispose of all containers created by the create_rack function
dispose_racks() {
    echo "Disposing of all rack containers..."
    local pids=()

    local containers=$(docker ps -a --filter "name=machine" --format "{{.Names}}")
    for container in $containers; do
        echo "Stopping and removing container: $container"
        docker stop $container && docker rm $container &
        pids+=($!)
    done

    # Wait for all background processes to complete
    for pid in "${pids[@]}"; do
        wait $pid
    done

    echo "All rack containers have been disposed of."
}

# Call the function to create racks from the list
# create_racks_from_list
# Uncomment the line below to test the dispose_racks function
dispose_racks



# get all ips
# docker ps --format '{{.ID}}\t{{.Names}}' | while read -r container_id container_name; do
#     ip=$(docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$container_id")
#     echo -e "$container_id\t$container_name\t$ip"
# done


// === BashScripts\execute_on_machines.sh ===

#!/bin/bash

# Declare an array to store JSON data
temp_file=$(mktemp)

# Check if at least two arguments are provided
if [ "$#" -lt 2 ]; then
    echo "Usage: $0 'machine1_ip,machine2_ip,...' 'command to execute'" | tee -a debug.txt
    exit 1
fi

# Split the first argument into an array of IPs
IFS=',' read -r -a machine_ips <<< "$1"

# The command to execute on each machine
command="$2"

# Loop through the array of IPs and execute the command on each machine in parallel
for ip in "${machine_ips[@]}"; do
    (
        # Capture the output of each SSH command and write it to a temporary file
        if output=$(ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@"$ip" "$command" 2>/dev/null); then
            jq -nR \
                --arg _ip "$ip" \
                --arg _cmd "$command" \
                --arg _out "$output" \
                '{"ip": $_ip, "result": {"cmd": $_cmd, "output": $_out}}'
        else
            # If SSH connection fails, write an error message to the temporary file
            jq -nR \
                --arg _ip "$ip" \
                --arg _err "SSH connection failed" \
                --arg _err_info "$output" \
                '{"ip": $_ip, "error": $_err, "error_info": $_err_info}' \
                >> "$temp_file"
        fi
    ) &
done

wait

# Combine individual JSON objects into a JSON array
jq -s '.' < "$temp_file"

rm "$temp_file" # Clean up the temporary file



// === BashScripts\test_script.sh ===

#!/bin/bash

test_ips="10.10.11.1,10.10.11.2,10.10.11.3,10.10.11.4,10.10.11.5,10.10.11.6,10.10.11.7,10.10.11.8,10.10.11.9,10.10.11.10,10.10.11.11,10.10.11.12,10.10.11.13,10.10.11.14,10.10.11.15,10.10.11.16,10.10.11.17,10.10.11.18,10.10.11.19,10.10.11.20,10.10.12.1,10.10.12.2,10.10.12.3,10.10.12.4,10.10.12.5,10.10.12.6,10.10.12.7,10.10.12.8,10.10.12.9,10.10.12.10,10.10.12.11,10.10.12.12,10.10.12.13,10.10.12.14,10.10.12.15,10.10.12.16,10.10.12.17,10.10.12.18,10.10.12.19,10.10.12.20,10.10.13.1,10.10.13.2,10.10.13.3,10.10.13.4,10.10.13.5,10.10.13.6,10.10.13.7,10.10.13.8,10.10.13.9,10.10.13.10,10.10.13.11,10.10.13.12,10.10.13.13,10.10.13.14,10.10.13.15,10.10.13.16,10.10.13.17,10.10.13.18,10.10.13.19,10.10.13.20,10.10.14.1,10.10.14.2,10.10.14.3,10.10.14.4,10.10.14.5,10.10.14.6,10.10.14.7,10.10.14.8,10.10.14.9,10.10.14.10,10.10.14.11,10.10.14.12,10.10.14.13,10.10.14.14,10.10.14.15,10.10.14.16,10.10.14.17,10.10.14.18,10.10.14.19,10.10.14.20,10.10.21.1,10.10.21.2,10.10.21.3,10.10.21.4,10.10.21.5,10.10.21.6,10.10.21.7,10.10.21.8,10.10.21.9,10.10.21.10,10.10.21.11,10.10.21.12,10.10.21.13,10.10.21.14,10.10.21.15,10.10.21.16,10.10.21.17,10.10.21.18,10.10.21.19,10.10.21.20,10.10.22.1,10.10.22.2,10.10.22.3,10.10.22.4,10.10.22.5,10.10.22.6,10.10.22.7,10.10.22.8,10.10.22.9,10.10.22.10,10.10.22.11,10.10.22.12,10.10.22.13,10.10.22.14,10.10.22.15,10.10.22.16,10.10.22.17,10.10.22.18,10.10.22.19,10.10.22.20,10.10.23.1,10.10.23.2,10.10.23.3,10.10.23.4,10.10.23.5,10.10.23.6,10.10.23.7,10.10.23.8,10.10.23.9,10.10.23.10,10.10.23.11,10.10.23.12,10.10.23.13,10.10.23.14,10.10.23.15,10.10.23.16,10.10.23.17,10.10.23.18,10.10.23.19,10.10.23.20,10.10.24.1,10.10.24.2,10.10.24.3,10.10.24.4,10.10.24.5,10.10.24.6,10.10.24.7,10.10.24.8,10.10.24.9,10.10.24.10,10.10.24.11,10.10.24.12,10.10.24.13,10.10.24.14,10.10.24.15,10.10.24.16,10.10.24.17,10.10.24.18,10.10.24.19,10.10.24.20,10.10.25.1,10.10.25.2,10.10.25.3,10.10.25.4,10.10.25.5,10.10.25.6,10.10.25.7,10.10.25.8,10.10.25.9,10.10.25.10,10.10.25.11,10.10.25.12,10.10.25.13,10.10.25.14,10.10.25.15,10.10.25.16,10.10.25.17,10.10.25.18,10.10.25.19,10.10.25.20,10.10.111.1,10.10.111.2,10.10.111.3,10.10.111.4,10.10.111.5,10.10.111.6,10.10.111.7,10.10.111.8,10.10.111.9,10.10.111.10,10.10.111.11,10.10.111.12,10.10.111.13,10.10.111.14,10.10.111.15,10.10.111.16,10.10.111.17,10.10.111.18,10.10.111.19,10.10.111.20,10.10.112.1,10.10.112.2,10.10.112.3,10.10.112.4,10.10.112.5,10.10.112.6,10.10.112.7,10.10.112.8,10.10.112.9,10.10.112.10,10.10.112.11,10.10.112.12,10.10.112.13,10.10.112.14,10.10.112.15,10.10.112.16,10.10.112.17,10.10.112.18,10.10.112.19,10.10.112.20,10.10.113.1,10.10.113.2,10.10.113.3,10.10.113.4,10.10.113.5,10.10.113.6,10.10.113.7,10.10.113.8,10.10.113.9,10.10.113.10,10.10.113.11,10.10.113.12,10.10.113.13,10.10.113.14,10.10.113.15,10.10.113.16,10.10.113.17,10.10.113.18,10.10.113.19,10.10.113.20,10.10.121.1,10.10.121.2,10.10.121.3,10.10.121.4,10.10.121.5,10.10.121.6,10.10.121.7,10.10.121.8,10.10.121.9,10.10.121.10,10.10.121.11,10.10.121.12,10.10.121.13,10.10.121.14,10.10.121.15,10.10.121.16,10.10.121.17,10.10.121.18,10.10.121.19,10.10.121.20,10.10.122.1,10.10.122.2,10.10.122.3,10.10.122.4,10.10.122.5,10.10.122.6,10.10.122.7,10.10.122.8,10.10.122.9,10.10.122.10,10.10.122.11,10.10.122.12,10.10.122.13,10.10.122.14,10.10.122.15,10.10.122.16,10.10.122.17,10.10.122.18,10.10.122.19,10.10.122.20,10.10.123.1,10.10.123.2,10.10.123.3,10.10.123.4,10.10.123.5,10.10.123.6,10.10.123.7,10.10.123.8,10.10.123.9,10.10.123.10,10.10.123.11,10.10.123.12,10.10.123.13,10.10.123.14,10.10.123.15,10.10.123.16,10.10.123.17,10.10.123.18,10.10.123.19,10.10.123.20,10.10.124.1,10.10.124.2,10.10.124.3,10.10.124.4,10.10.124.5,10.10.124.6,10.10.124.7,10.10.124.8,10.10.124.9,10.10.124.10,10.10.124.11,10.10.124.12,10.10.124.13,10.10.124.14,10.10.124.15,10.10.124.16,10.10.124.17,10.10.124.18,10.10.124.19,10.10.124.20,10.10.125.1,10.10.125.2,10.10.125.3,10.10.125.4,10.10.125.5,10.10.125.6,10.10.125.7,10.10.125.8,10.10.125.9,10.10.125.10,10.10.125.11,10.10.125.12,10.10.125.13,10.10.125.14,10.10.125.15,10.10.125.16,10.10.125.17,10.10.125.18,10.10.125.19,10.10.125.20"


# Correctly escaped command
command="ip addr | awk '\$1 ~ /^[0-9]+:/ { if (iface != \"\" && mac != \"\") print iface\": \"mac; iface = \$2; sub(/:$/, \"\", iface); mac = \"\" } \$1 == \"link/ether\" { mac = \$2 } END { if (iface != \"\" && mac != \"\") print iface\": \"mac }'"

# Pass the command to execute_on_machines.sh
./execute_on_machines.sh "$test_ips" "$command"


// === Config\config.js ===

// config.js
const config = {
    BACKEND_SERVER_IP: 'localhost',
    BACKEND_SERVER_PORT: '3000',

    FRONTEND_SERVER_IP: 'localhost',
    FRONTEND_SERVER_PORT: '5500',

    SSH_SERVER_IP: 'localhost',
    SSH_SERVER_PORT: '5000'
  };
  
  export default config;  
  


// === FrontEnd\public\LandingPage\js\scripts.js ===

$(function () {

    // init feather icons
    feather.replace();

    // init tooltip & popovers
    $('[data-toggle="tooltip"]').tooltip();
    $('[data-toggle="popover"]').popover();

    //page scroll
    $('a.page-scroll').bind('click', function (event) {
        var $anchor = $(this);
        $('html, body').stop().animate({
            scrollTop: $($anchor.attr('href')).offset().top - 20
        }, 1000);
        event.preventDefault();
    });

    // slick slider
    $('.slick-about').slick({
        slidesToShow: 1,
        slidesToScroll: 1,
        autoplay: true,
        autoplaySpeed: 3000,
        dots: true,
        arrows: false
    });

    //toggle scroll menu
    var scrollTop = 0;
    $(window).scroll(function () {
        var scroll = $(window).scrollTop();
        //adjust menu background
        if (scroll > 80) {
            if (scroll > scrollTop) {
                $('.smart-scroll').addClass('scrolling').removeClass('up');
            } else {
                $('.smart-scroll').addClass('up');
            }
        } else {
            // remove if scroll = scrollTop
            $('.smart-scroll').removeClass('scrolling').removeClass('up');
        }

        scrollTop = scroll;

        // adjust scroll to top
        if (scroll >= 600) {
            $('.scroll-top').addClass('active');
        } else {
            $('.scroll-top').removeClass('active');
        }
        return false;
    });

    // scroll top top
    $('.scroll-top').click(function () {
        $('html, body').stop().animate({
            scrollTop: 0
        }, 1000);
    });

    /**Theme switcher - DEMO PURPOSE ONLY */
    $('.switcher-trigger').click(function () {
        $('.switcher-wrap').toggleClass('active');
    });
    $('.color-switcher ul li').click(function () {
        var color = $(this).attr('data-color');
        $('#theme-color').attr("href", "css/" + color + ".css");
        $('.color-switcher ul li').removeClass('active');
        $(this).addClass('active');
    });
});

// === FrontEnd\public\LandingPage\LandingPage.html ===

<!doctype html>
<html lang="en">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Knight - Free Bootstrap 4 Product Landing Page Template</title>
    <meta name="description"
          content="Knight is a beautiful Bootstrap 4 template for product landing pages."/>

    <!--Inter UI font-->
    <link href="https://rsms.me/inter/inter-ui.css" rel="stylesheet">

    <!--vendors styles-->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick-theme.min.css">

    <!-- Bootstrap CSS / Color Scheme -->
    <link rel="stylesheet" href="css/default.css" id="theme-color">
</head>
<body>

<!--navigation-->
<section class="smart-scroll">
    <div class="container-fluid">
        <nav class="navbar navbar-expand-md navbar-dark">
            <a class="navbar-brand heading-black" href="index.html">
                Knight
            </a>
            <button class="navbar-toggler navbar-toggler-right border-0" type="button" data-toggle="collapse"
                    data-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false"
                    aria-label="Toggle navigation">
                <span data-feather="grid"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarCollapse">
                <ul class="navbar-nav ml-auto">
                    <li class="nav-item">
                        <a class="nav-link page-scroll" href="../MachineControlPanelPage/machine-control-panel.html">Interactive Nodes</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link page-scroll" href="#features">Features</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link page-scroll" href="#pricing">Pricing</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link page-scroll" href="#faq">FAQ</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link page-scroll" href="#blog">Blog</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link page-scroll d-flex flex-row align-items-center text-primary" href="#">
                            <em data-feather="layout" width="18" height="18" class="mr-2"></em>
                            Try Generator
                        </a>
                    </li>
                </ul>
            </div>
        </nav>
    </div>
</section>

<!--hero header-->
<section class="py-7 py-md-0 bg-hero" id="home">
    <div class="container">
        <div class="row vh-md-100">
            <div class="col-md-8 col-sm-10 col-12 mx-auto my-auto text-center">
                <h1 class="heading-black text-capitalize">Quickly build landing pages with Knight</h1>
                <p class="lead py-3">Knight is a platform that helps freelancers and companies build beautiful landing
                    pages in minutes. Sign up for free.</p>
                <button class="btn btn-primary d-inline-flex flex-row align-items-center">
                    Get started now
                    <em class="ml-2" data-feather="arrow-right"></em>
                </button>
            </div>
        </div>
    </div>
</section>

<!-- features section -->
<section class="pt-6 pb-7" id="features">
    <div class="container">
        <div class="row">
            <div class="col-md-6 mx-auto text-center">
                <h2 class="heading-black">Knight offers everything you need.</h2>
                <p class="text-muted lead">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum in nisi
                    commodo, tempus odio a, vestibulum nibh.</p>
            </div>
        </div>
        <div class="row mt-5">
            <div class="col-md-10 mx-auto">
                <div class="row feature-boxes">
                    <div class="col-md-6 box">
                        <div class="icon-box box-primary">
                            <div class="icon-box-inner">
                                <span data-feather="edit-3" width="35" height="35"></span>
                            </div>
                        </div>
                        <h5>Create once. Share everywhere.</h5>
                        <p class="text-muted">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum in
                            nisi commodo, tempus odio a, vestibulum nibh.</p>
                    </div>
                    <div class="col-md-6 box">
                        <div class="icon-box box-success">
                            <div class="icon-box-inner">
                                <span data-feather="monitor" width="35" height="35"></span>
                            </div>
                        </div>
                        <h5>Unlimited devices</h5>
                        <p class="text-muted">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum in
                            nisi commodo, tempus odio a, vestibulum nibh.</p>
                    </div>
                    <div class="col-md-6 box">
                        <div class="icon-box box-danger">
                            <div class="icon-box-inner">
                                <span data-feather="layout" width="35" height="35"></span>
                            </div>
                        </div>
                        <h5>Beautiful tempates & layouts</h5>
                        <p class="text-muted">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum in
                            nisi commodo, tempus odio a, vestibulum nibh.</p>
                    </div>
                    <div class="col-md-6 box">
                        <div class="icon-box box-info">
                            <div class="icon-box-inner">
                                <span data-feather="globe" width="35" height="35"></span>
                            </div>
                        </div>
                        <h5>Available globally</h5>
                        <p class="text-muted">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum in
                            nisi commodo, tempus odio a, vestibulum nibh.</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mt-6">
            <div class="col-md-6 mr-auto">
                <h2>Knight is more than just a page builder.</h2>
                <p class="mb-5">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla convallis pulvinar vestibulum. Donec eleifend, sem sed dictum mattis, turpis purus placerat eros.</p>
                <a href="#" class="btn btn-light">
                    Try the live demo
                </a>
            </div>
            <div class="col-md-5">
                <div class="slick-about">
                    <img src="img/blog-1.jpg" class="img-fluid rounded d-block mx-auto" alt="Work 1"/>
                    <img src="img/blog-2.jpg" class="img-fluid rounded d-block mx-auto" alt="Work 2"/>
                    <img src="img/blog-3.jpg" class="img-fluid rounded d-block mx-auto" alt="Work 3"/>
                </div>
            </div>
        </div>
    </div>
</section>

<!--pricing section-->
<section class="py-7 bg-dark section-angle top-right bottom-right" id="pricing">
    <div class="container">
        <div class="row">
            <div class="col-md-6 mx-auto text-center">
                <h2 class="text-white heading-black">Choose your pricing plan.</h2>
                <p class="text-light lead">Simply pricing - 7 Days free trial</p>
            </div>
        </div>
        <!--pricing tables-->
        <div class="row pt-5 pricing-table">
            <div class="col-12 mx-auto">
                <div class="card-deck pricing-table">
                    <div class="card">
                        <div class="card-body">
                            <h3 class="card-title pt-3">Personal</h3>
                            <h2 class="card-title text-primary mb-0 pt-4">$59</h2>
                            <div class="text-muted font-weight-medium mt-2">per month</div>
                            <ul class="list-unstyled pricing-list">
                                <li>1 user</li>
                                <li>10 websites</li>
                                <li>Access to premium templates</li>
                                <li>Basic support</li>
                            </ul>
                            <a href="#" class="btn btn-primary">
                                Start free trial
                            </a>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <h3 class="card-title pt-3">Agency</h3>
                            <h2 class="card-title text-info mb-0 pt-4">$159</h2>
                            <div class="text-muted font-weight-medium mt-2">per month</div>
                            <ul class="list-unstyled pricing-list">
                                <li>2-15 users</li>
                                <li>50 websites</li>
                                <li>Access to premium templates</li>
                                <li>Priority support</li>
                            </ul>
                            <a href="#" class="btn btn-info">
                                Start free trial
                            </a>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <h3 class="card-title pt-3">Enterprise</h3>
                            <h2 class="card-title text-primary mb-0 pt-4">$499</h2>
                            <div class="text-muted font-weight-medium mt-2">per month</div>
                            <ul class="list-unstyled pricing-list">
                                <li>Unlimited users</li>
                                <li>Unlimited websites</li>
                                <li>Access to premium templates</li>
                                <li>24/7 support</li>
                            </ul>
                            <a href="#" class="btn btn-primary">
                                Start free trial
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mt-6">
            <div class="col-md-4 mr-auto">
                <h3>Everything is covered.</h3>
                <p class="lead">
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum in nisi commodo, tempus odio a,
                    vestibulum nibh.
                </p>
            </div>
            <div class="col-md-7 offset-md-1">
                <ul class="features-list">
                    <li>Weekly new templates</li>
                    <li>Access to new features</li>
                    <li>MailChimp integration</li>
                    <li>Stripe integration</li>
                    <li>100 refund guarantee</li>
                    <li>Advance SEO tools</li>
                    <li>Free unlimited support</li>
                </ul>
            </div>
        </div>
        <div class="row mt-5">
            <div class="col-md-8 col-12 divider top-divider mx-auto pt-5 text-center">
                <h3>Try Knight free for 7 days</h3>
                <p class="mb-4">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum in nisi commodo,
                    tempus odio a, vestibulum nibh.</p>
                <button class="btn btn-primary">
                    Create your account
                </button>
            </div>
        </div>
    </div>
</section>

<!--faq section-->
<section class="py-7" id="faq">
    <div class="container">
        <div class="row">
            <div class="col-md-6 mx-auto text-center">
                <h2>Frequently asked questions</h2>
                <p class="text-muted lead">Answers to most common questions.</p>
            </div>
        </div>
        <div class="row mt-5">
            <div class="col-md-10 mx-auto">
                <div class="row">
                    <div class="col-md-6 mb-5">
                        <h6>Can I try it for free?</h6>
                        <p class="text-muted">Nam liber tempor cum soluta nobis eleifend option congue nihil imper per tem por legere me doming.</p>
                    </div>
                    <div class="col-md-6 mb-5">
                        <h6>Do you have hidden fees?</h6>
                        <p class="text-muted">Nam liber tempor cum soluta nobis eleifend option congue nihil imper per tem por legere me doming.</p>
                    </div>
                    <div class="col-md-6 mb-5">
                        <h6>What are the payment methods you accept?</h6>
                        <p class="text-muted">Nam liber tempor cum soluta nobis eleifend option congue nihil imper per tem por legere me doming.</p>
                    </div>
                    <div class="col-md-6 mb-5">
                        <h6>How often do you release updates?</h6>
                        <p class="text-muted">Nam liber tempor cum soluta nobis eleifend option congue nihil imper per tem por legere me doming.</p>
                    </div>
                    <div class="col-md-6 mb-5">
                        <h6>What is your refund policy?</h6>
                        <p class="text-muted">Nam liber tempor cum soluta nobis eleifend option congue nihil imper per tem por legere me doming.</p>
                    </div>
                    <div class="col-md-6 mb-5">
                        <h6>How can I contact you?</h6>
                        <p class="text-muted">Nam liber tempor cum soluta nobis eleifend option congue nihil imper per tem por legere me doming.</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mt-4">
            <div class="col-md-6 mx-auto text-center">
                <h5 class="mb-4">Have questions?</h5>
                <a href="#" class="btn btn-primary">Contact us</a>
            </div>
        </div>
    </div>
</section>

<!--news section-->
<section class="py-7 bg-dark section-angle top-left bottom-left" id="blog">
    <div class="container">
        <div class="row">
            <div class="col-md-6 mx-auto text-center">
                <h2 class="heading-black">News from Knight.</h2>
                <p class="text-muted lead">What's new at Knight.</p>
            </div>
        </div>
        <div class="row mt-5">
            <div class="col-md-4">
                <div class="card">
                    <a href="#">
                        <img class="card-img-top img-raised" src="img/blog-1.jpg" alt="Blog 1">
                    </a>
                    <div class="card-body">
                        <a href="#" class="card-title mb-2"><h5>We launch new iOS & Android mobile apps</h5></a>
                        <p class="text-muted small-xl mb-2">Sep 27, 2018</p>
                        <p class="card-text">Nam liber tempor cum soluta nobis eleifend option congue nihil imper,
                            consectetur adipiscing elit. <a href="#">Learn more</a></p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <a href="#">
                        <img class="card-img-top img-raised" src="img/blog-2.jpg" alt="Blog 2">
                    </a>
                    <div class="card-body">
                        <a href="#" class="card-title mb-2"><h5>New update is available for the editor</h5></a>
                        <p class="text-muted small-xl mb-2">August 16, 2018</p>
                        <p class="card-text">Nam liber tempor cum soluta nobis eleifend option congue nihil imper,
                            consectetur adipiscing elit. <a href="#">Learn more</a></p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <a href="#">
                        <img class="card-img-top img-raised" src="img/blog-3.jpg" alt="Blog 3">
                    </a>
                    <div class="card-body">
                        <a href="#" class="card-title mb-2"><h5>The story of building #1 page builder</h5></a>
                        <p class="text-muted small-xl mb-2">December 2nd, 2017</p>
                        <p class="card-text">Nam liber tempor cum soluta nobis eleifend option congue nihil imper,
                            consectetur adipiscing elit. <a href="#">Learn more</a></p>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mt-6">
            <div class="col-md-6 mx-auto text-center">
                <a href="#" class="btn btn-primary">View all posts</a>
            </div>
        </div>
    </div>
</section>

<!--footer-->
<footer class="py-6">
    <div class="container">
        <div class="row">
            <div class="col-sm-5 mr-auto">
                <h5>About Knight</h5>
                <p class="text-muted">Magnis modipsae que voloratati andigen daepeditem quiate conecus aut labore.
                    Laceaque quiae sitiorem rest non restibusaes maio es dem tumquam explabo.</p>
                <ul class="list-inline social social-sm">
                    <li class="list-inline-item">
                        <a href=""><i class="fa fa-facebook"></i></a>
                    </li>
                    <li class="list-inline-item">
                        <a href=""><i class="fa fa-twitter"></i></a>
                    </li>
                    <li class="list-inline-item">
                        <a href=""><i class="fa fa-google-plus"></i></a>
                    </li>
                    <li class="list-inline-item">
                        <a href=""><i class="fa fa-dribbble"></i></a>
                    </li>
                </ul>
            </div>
            <div class="col-sm-2">
                <h5>Legal</h5>
                <ul class="list-unstyled">
                    <li><a href="#">Privacy</a></li>
                    <li><a href="#">Terms</a></li>
                    <li><a href="#">Refund policy</a></li>
                </ul>
            </div>
            <div class="col-sm-2">
                <h5>Partner</h5>
                <ul class="list-unstyled">
                    <li><a href="#">Refer a friend</a></li>
                    <li><a href="#">Affiliates</a></li>
                </ul>
            </div>
            <div class="col-sm-2">
                <h5>Help</h5>
                <ul class="list-unstyled">
                    <li><a href="#">Support</a></li>
                    <li><a href="#">Log in</a></li>
                </ul>
            </div>
        </div>
        <div class="row mt-5">
            <div class="col-12 text-muted text-center small-xl">
                &copy; 2019 Knight - All Rights Reserved
            </div>
        </div>
    </div>
</footer>

<!--scroll to top-->
<div class="scroll-top">
    <i class="fa fa-angle-up" aria-hidden="true"></i>
</div>

<!-- theme switcher (FOR DEMO ONLY - REMOVE FROM PRODUCTION)-->
<div class="switcher-wrap">
    <div class="switcher-trigger">
        <span class="fa fa-gear"></span>
    </div>
    <div class="color-switcher">
        <h6>Color Switcher</h6>
        <ul class="mt-3 clearfix">
            <li class="bg-teal active" data-color="default" title="Default Teal"></li>
            <li class="bg-purple" data-color="purple" title="Purple"></li>
            <li class="bg-blue" data-color="blue" title="Blue"></li>
            <li class="bg-red" data-color="red" title="Red"></li>
            <li class="bg-green" data-color="green" title="Green"></li>
            <li class="bg-indigo" data-color="indigo" title="Indigo"></li>
            <li class="bg-orange" data-color="orange" title="Orange"></li>
            <li class="bg-cyan" data-color="cyan" title="Cyan"></li>
            <li class="bg-yellow" data-color="yellow" title="Yellow"></li>
            <li class="bg-pink" data-color="pink" title="Pink"></li>
        </ul>
        <p>These are just demo colors. You can <b>easily</b> create your own color scheme.</p>
    </div>
</div>

<!-- jQuery first, then Popper.js, then Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/feather-icons/4.7.3/feather.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick.min.js"></script>
<script src="js/scripts.js"></script>
</body>
</html>

// === FrontEnd\public\LoginPage\login.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Design by foolishdeveloper.com -->
    <title>Glassmorphism login Form Tutorial in html css</title>

    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
    <!--Stylesheet-->
</head>
<body>
<div class="background">
    <div class="shape"></div>
    <div class="shape"></div>
</div>
<form id="loginForm">
    <h3>Login Here</h3>

    <label for="username">Username</label>
    <input type="text" placeholder="Email or Phone" id="username" name="username">

    <label for="password">Password</label>
    <input type="password" placeholder="Password" id="password" name="password">

    <button type="submit">Log In</button>
    <button type="button" id="registerBtn">Register</button>
    <div class="social">
        <div class="go"><i class="fab fa-google"></i>  Google</div>
        <div class="fb"><i class="fab fa-facebook"></i>  Facebook</div>
    </div>
    <script src="../scripts/config.js"></script>
    <script src="./login.js"></script>
</form>
</body>
</html>


// === FrontEnd\public\LoginPage\login.js ===

// login.js
document.getElementById('loginForm').addEventListener('submit', async (event) => {
    event.preventDefault();
    
    // Get form data
    const formData = new FormData(event.target);
    const email = formData.get('username');
    const password = formData.get('password');
    
    // Check if both fields are filled out
    if (!email || !password) {
        alert('Please fill out both email and password fields.');
        return; // Stop further execution
    }
    
    // Proceed with login
    const bodyData = { email, password };
    console.log(bodyData);
    try {
        const response = await fetch(`http://${config.BACKEND_SERVER_IP}/login`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(bodyData)
        });
        
        if (response.ok) {
            const data = await response.json();
            localStorage.setItem('token', data.token); // Save token
            window.location.href = '../../interact.html'; // Redirect to GUI
        } else {
            alert('Login failed');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('An error occurred. Please try again later.');
    }
});


document.getElementById('registerBtn').addEventListener('click', function() {
    window.location.href = '../RegisterPage/register.html';
});


// === FrontEnd\public\LoginPage\styles.css ===

/* Login Screen CSS */
        *,
        *:before,
        *:after{
            padding: 0;
            margin: 0;
            box-sizing: border-box;
        }
	body{
            background-color: #080710;
        }
        .background{
            width: 430px;
            height: 520px;
            position: absolute;
            transform: translate(-50%,-50%);
            left: 50%;
            top: 50%;
        }
        .background .shape{
            height: 200px;
            width: 200px;
            position: absolute;
            border-radius: 50%;
        }
        .shape:first-child{
            background: linear-gradient(
                #1845ad,
                #23a2f6
            );
            left: -80px;
            top: -80px;
        }
        .shape:last-child{
            background: linear-gradient(
                to right,
                #ff512f,
                #f09819
            );
            right: -30px;
            bottom: -80px;
        }
        form{
            width: 400px;
            background-color: rgba(255,255,255,0.13);
            position: absolute;
            transform: translate(-50%,-50%);
            top: 50%;
            left: 50%;
            border-radius: 10px;
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255,255,255,0.1);
            box-shadow: 0 0 40px rgba(8,7,16,0.6);
            padding: 50px 35px;
        }
        form *{
            font-family: 'Poppins',sans-serif;
            color: #ffffff;
            letter-spacing: 0.5px;
            outline: none;
            border: none;
        }
        form h3{
            font-size: 32px;
            font-weight: 500;
            line-height: 42px;
            text-align: center;
        }
        
        label{
            display: block;
            margin-top: 30px;
            font-size: 16px;
            font-weight: 500;
        }

        
        input{
            display: block;
            height: 50px;
            width: 100%;
            background-color: rgba(255,255,255,0.07);
            border-radius: 3px;
            padding: 0 10px;
            margin-top: 8px;
            font-size: 14px;
            font-weight: 300;
        }
        ::placeholder{
            color: #e5e5e5;
        }
        button{
            margin-top: 50px;
            width: 100%;
            background-color: #ffffff;
            color: #080710;
            padding: 15px 0;
            font-size: 18px;
            font-weight: 600;
            border-radius: 5px;
            cursor: pointer;
        }
        .social{
          margin-top: 30px;
          display: flex;
        }
        .social div{
          background: red;
          width: 150px;
          border-radius: 3px;
          padding: 5px 10px 10px 5px;
          background-color: rgba(255,255,255,0.27);
          color: #eaf0fb;
          text-align: center;
        }
        .social div:hover{
          background-color: rgba(255,255,255,0.47);
        }
        .social .fb{
          margin-left: 25px;
        }
        .social i{
          margin-right: 4px;
        }




// === FrontEnd\public\MachineControlPanelPage\api.js ===

_config = dev

// uncomment to use production env variables
//  _config = prod

async function executeScript(ipsString, bashCode) {
    const executeScriptUrl = `http://${_config.SSH_SERVER}/execute-script`;
    try {
      const response = await fetch(executeScriptUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ ips: ipsString, script: bashCode }),
      });
      const data = await response.json();
      return data; // Return the JSON response
    } catch (error) {
      console.error("Error in executing script:", error);
      throw error; // Rethrow the error to handle it in the calling context
    }
  }
  
  async function updateMachineState(mappedArrayFormatted) {
    const updateStateUrl = `http://${_config.BACKEND_SERVER}/update-machine-state`;
    try {
      const response = await fetch(updateStateUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(mappedArrayFormatted),
      });
      const data = await response.json();
      return data; // Return the JSON response
    } catch (error) {
      console.error("Error in updating machine state:", error);
      throw error; // Rethrow the error to handle it in the calling context
    }
  }

  async function fetchHardwareInfo() {
    const apiEndpoint = `http://${_config.BACKEND_SERVER}/dc02-hardware-info`;
    const response = await fetch(apiEndpoint);
    if (!response.ok) {
      throw new Error(`Failed to fetch state: ${response.statusText}`);
    }
    return response.json();
  }

  async function loadBoxState() {
    const apiUrl = `http://${_config.BACKEND_SERVER}/load-machine-state`;
  
    try {
      const response = await fetch(apiUrl);
      if (!response.ok) {
        throw new Error("Failed to fetch state");
      }
  
      const data = await response.json();
      // Assuming applyBoxState correctly handles the array structure of data
      if (Array.isArray(data)) {
        applyBoxState(data);
        
	    return data;
      } else console.error('data object is not an array:', data);
    } catch (error) {
      console.error("Error loading state:", error);
    }
  }
  
async function checkNH_Rigs() {
    // const apiEndpoint = `http://${config.SSH_SERVER_IP}/get-nh-rig-status`;
    const apiEndpoint = `http://${_config.SSH_SERVER}/get-nh-rig-status`;
    const response = await fetch(apiEndpoint);
    if (!response.ok) {
      throw new Error(`Failed to fetch state: ${response.statusText}`);
    }
    rigs = await response.json();
    const rigsNotMining = rigs.filter(rig => rig.minerStatus !== 'MINING');
    console.log("Rigs Not Mining:", rigsNotMining);
}

// checkNH_Rigs()


// === FrontEnd\public\MachineControlPanelPage\bash_cmd.js ===

function getNicInfoString() {
    return `
        ip addr | awk '
            /^[0-9]+:/ {
                if (iface != "" && mac != "") print iface ": " mac;
                iface = $2; sub(/:$/, "", iface); mac = "";
            }
            $1 == "link/ether" { mac = $2; }
            END {
                if (iface != "" && mac != "") print iface ": " mac;
            }
        '`;
}

function getGPUInfoString() {
    return 'nvidia-smi -L';
}


// === FrontEnd\public\MachineControlPanelPage\boxFactory\boxFactory.js ===


    function addButton(container, text, id, onClick) {
        const button = document.createElement('button');
        button.textContent = text;
        button.className = 'button-86';
        button.id = id;
        button.addEventListener('click', onClick);
        container.appendChild(button);
    }
    

class BoxContainerManager {
    constructor() {
        this.rows = [];
        this.rowMap = {};
        this.root = document.getElementById('boxFactoryRoot');
        if (!this.root) {
            console.error('Root container not found');
            return;
        }
        this.createHeader();
    }

    createHeader() {
        const rootHeader = document.createElement('div');
        rootHeader.className = '';
        rootHeader.id = 'sectionHeader'
        rootHeader.textContent = '';
        this.root.appendChild(rootHeader);

        addButton(rootHeader, 'Select All', 'selectAllBtn', () => this.selectAllBoxes());
        addButton(rootHeader, 'Clear', 'clearAllBtn', () => this.clearAllSelection());
    }

    createRowContainer(sectionId, rowLabel, RowContainerClass = RowContainerBase, ...additionalArgs) {
        // Check if the row already exists to prevent duplicates
        if (this.rowMap[rowLabel]) {
            console.warn(`Row ${rowLabel} already exists.`);
            return;
        }
    
        // Find or create the section-container for the new row
        let sectionContainer = this.root.querySelector('.section-container');
        if (!sectionContainer) {
            sectionContainer = document.createElement('div');
            sectionContainer.className = 'section-container';
            this.root.appendChild(sectionContainer); // Append the section-container directly to the root
        }
    
        // Find or create the section for the new row
        let section = sectionContainer.querySelector(`#${sectionId}`);
        if (!section) {
            section = document.createElement('div');
            section.className = 'section';
            section.id = sectionId;
            sectionContainer.appendChild(section); // Append the section to the section-container
        }
    
        // Instantiate the RowContainer with the provided class and additional arguments
        const rowContainerInstance = new RowContainerClass(sectionId, rowLabel, ...additionalArgs);
    
        // Check if rowContainerInstance properly created its container
        if (rowContainerInstance.container) {
            section.appendChild(rowContainerInstance.container); // Append the row container to the newly created or existing section
            this.rows.push(rowContainerInstance);
            this.rowMap[rowLabel] = rowContainerInstance;
        } else {
            console.error("Failed to create or access row container.");
        }
    }
    

    getRow(rowLabel) {
        // Return the row if it exists, otherwise return undefined
        return this.rowMap[rowLabel];
    }

    updateAllBoxBehaviors(eventHandlers) {
        this.rows.forEach(row => row.updateAllBoxBehaviors(eventHandlers));
    }

    getInfoAll() {
        return this.rows.reduce((acc, row) => acc.concat(...row.getInfoRow()), []);
    }

    getObjAll() {
        const allObjects = [];
        this.rows.forEach(row => {
            allObjects.push(...row.getObjRow());
        });
        return allObjects;
    }

    getIpAll() {
        const allIps = [];
        this.rows.forEach(row => {
            allIps.push(...row.getIpRow());
        });
        return allIps;
    }

    getSelectedBoxesAll() {
        let selectedBoxesAll = [];
        this.rows.forEach(row => {
            selectedBoxesAll.push(...row.getSelectedBoxesRow())
        });
        return selectedBoxesAll
    }

    getSelectedBoxesIps() {
        // Use getSelectedBoxesAll to get all selected boxes
        const selectedBoxes = this.getSelectedBoxesAll();
        // Map over these boxes to extract the 'ip' property
        const selectedIps = selectedBoxes.map(box => box.ip);
        return selectedIps;
    }

    selectAllBoxes() {
        this.rows.forEach(row => row.selectAllRowBoxes());
    }

    clearAllSelection() {
        this.rows.forEach(row => row.clearRowSelection())
    }

    getMachineCount() {
        return this.getObjAll().length
    }

}

class RowContainerBase {
    constructor(sectionId, rowLabel) {
        this.sectionId = sectionId;
        this.rowLabel = rowLabel;
        this.racks = []; // This will store RackContainer instances

        // Directly initialize the container for the row, no need for an additional 'rowContainer'.
        this.container = document.createElement('div');
        this.container.className = 'row-container';
        this.container.setAttribute('data-row', this.rowLabel);

        // You might not need 'sectionContainer' here unless it's used differently than shown.
        // If each row is directly within a 'section', that should be handled in BoxContainerManager.

        this.createHeader(); // Create the header as part of the row container initialization.
    }

    initializeContainer() {
        this.sectionContainer = document.createElement('div');
        this.sectionContainer.className = 'section';
        this.sectionContainer.id = this.sectionId

        // Assuming rowContainer is the main container for this row
        this.rowContainer = document.createElement('div');
        this.rowContainer.className = 'row-container';
        this.rowContainer.setAttribute('data-row', this.rowLabel);
        this.sectionContainer.appendChild(this.rowContainer);

        this.createHeader();
    }

    createHeader() {
        const header = document.createElement('div');
        header.className = 'row-container-header';
        header.textContent = `Section: ${this.sectionId}, Row: ${this.rowLabel}`;

        // Create and append "Select All" button
        const selectAllBtn = document.createElement('button');
        selectAllBtn.textContent = 'Select All';
        selectAllBtn.addEventListener('click', () => this.selectAllRowBoxes());
        header.appendChild(selectAllBtn);

        // Create and append "Clear" button
        const clearBtn = document.createElement('button');
        clearBtn.textContent = 'Clear';
        clearBtn.addEventListener('click', () => this.clearRowSelection());
        header.appendChild(clearBtn);

        // Append the header directly to the row's container.
        this.container.appendChild(header);
    }


    addRack(rackLabel, defaultBoxCount = 20, RackContainerClass = RackContainerBase, ...additionalArgs) {
        // Dynamically create an instance of the provided RackContainerClass
        // The constructor of RackContainerClass should be designed to accept sectionId, rowLabel, and rackLabel as its first three parameters
        // followed by any additional arguments that might be specific to the specialized class
        const rack = new RackContainerClass(this.sectionId, this.rowLabel, rackLabel, defaultBoxCount, ...additionalArgs);
        this.container.appendChild(rack.container);
        this.racks.push(rack);
    }

    updateAllBoxBehaviors(eventHandlers) {
        this.racks.forEach(rack => rack.updateAllBoxBehaviors(eventHandlers));
    }

    getObjRow() {
        let objRow = [];
        this.racks.forEach(rack => {
            objRow.push(...rack.getObjects());
        });
        return objRow;
    }

    getInfoRow() {
        const rowInfo = [];
        this.racks.forEach(rack => {
            rowInfo.push(...rack.getInfoRack());
        });
        return rowInfo;
    }

    getIpRow() {
        let ipRow = [];
        this.racks.forEach(rack => {
            ipRow.push(...rack.getIpRack());
        });
        return ipRow;
    }
    
    getSelectedBoxesRow() {
        let selectedBoxesRow = [];
        this.racks.forEach(rack => {
            selectedBoxesRow.push(...rack.getSelectedBoxesRack())
        });
        return selectedBoxesRow
    }

    selectAllRowBoxes() {
        this.racks.forEach(rack => rack.selectAllRackBoxes());
    }

    clearRowSelection() {
        this.racks.forEach(rack => rack.clearRackSelection());
    }


}

class RackContainerBase{
    constructor(sectionId, rowLabel, rackLabel, defaultBoxCount = 20) {
        this.sectionId = sectionId;
        this.rowLabel = rowLabel;
        this.rackLabel = rackLabel;
        this._selectedBoxesRack = new Set(); // To track selected boxes
        this.defaultBoxCount = defaultBoxCount;
        this.boxes = []; // Store box instances
        this.initializeContainer();
        this.createDefaultBoxes();
    }

    initializeContainer() {
        const section = document.getElementById(this.sectionId);
        if (!section) {
            console.error(`Section with ID '${this.sectionId}' not found.`);
            return;
        }

        let rowContainer = section.querySelector(`.${this.rowLabel}-row-container`);
        if (!rowContainer) {
            rowContainer = document.createElement('div');
            rowContainer.className = `${this.rowLabel}-row-container row-container`;
            rowContainer.setAttribute('data-row', this.rowLabel);
            section.appendChild(rowContainer);
        }

        this.container = document.createElement('div');
        this.container.className = 'rack-container';
        rowContainer.appendChild(this.container);

        this.createHeader();
        this.createBoxesContainer();
    }

    createHeader() {
        const header = document.createElement('div');
        header.className = 'box-container-header';
        this.container.appendChild(header);
        console.log('not implemented');
    }

    createBoxesContainer() {
        this.boxesContainer = document.createElement('div');
        this.boxesContainer.className = 'boxes-container'; // Ensure this line is correctly assigning the class
        this.container.appendChild(this.boxesContainer);
    }

    createDefaultBoxes() {
        for (let i = 1; i <= this.defaultBoxCount; i++) {
            this.addBox(i, {});
        }
    }

    addBox(index, eventHandlers = {}) {
        const box = new Box(this.rowLabel, this.rackLabel, index, eventHandlers);
        this.boxesContainer.appendChild(box.element);
        this.boxes.push(box);
    }

    updateAllBoxBehaviors(eventHandlers) {
        this.boxes.forEach(box => box.updateEventHandlers(eventHandlers));
    }

    setBoxCount(newCount) {
        const currentCount = this.boxes.length;
        if (newCount > currentCount) {
            // Add more boxes if newCount is greater than currentCount
            for (let i = currentCount + 1; i <= newCount; i++) {
                this.addBox(i, { click: () => console.log(`Box ${i} clicked`) });
            }
        } else if (newCount < currentCount) {
            // Remove boxes if newCount is less than currentCount
            for (let i = currentCount; i > newCount; i--) {
                const boxToRemove = this.boxes.pop();
                boxToRemove.element.remove(); // Assuming element is the DOM element of the box
            }
        }
    }

    getObjects() {
        return this.boxes;
    }

    

    getInfoRack() {
        const rackInfo = [];
        this.boxes.forEach(box => {
            rackInfo.push(box.getInfo());
        });
        return rackInfo;
    }

    getIpRack() {
        const rackInfo = [];
        this.boxes.forEach(box => {
            rackInfo.push(box.getIp());
        });
        return rackInfo;
    }

    getSelectedBoxesRack() {
        return this._selectedBoxesRack
    }
}

class SpecializedRackContainer extends RackContainerBase {
    constructor(sectionId, rowLabel, rackLabel, defaultBoxCount) {
        super(sectionId, rowLabel, rackLabel, defaultBoxCount);
        // Additional initialization for SpecializedRackContainer
    }

    createHeader() {
        const header = document.createElement('div');
        header.className = 'box-container-header';
        // Dynamically create the header text to include row and rack labels
        header.textContent = `Row: ${this.rowLabel} Rack: ${this.rackLabel}`;
        this.container.appendChild(header);

        // Create and append "Select All" button
        const selectAllBtn = document.createElement('button');
        selectAllBtn.textContent = 'Select All';
        selectAllBtn.addEventListener('click', () => this.selectAllRackBoxes());
        header.appendChild(selectAllBtn);

        // Create and append "Clear" button
        const clearBtn = document.createElement('button');
        clearBtn.textContent = 'Clear';
        clearBtn.addEventListener('click', () => this.clearRackSelection());
        header.appendChild(clearBtn);
    }

    // Override addBox to include specialized behavior
    addBox(index, eventHandlers = {}) {
        const boxObject = super.addBox(index, {
            ...eventHandlers,
            click: (event) => {
                // Find the box object as before
                const currentIndex = this.boxes.findIndex(box => box.element === event.currentTarget);
                const box = this.boxes[currentIndex];
                box.toggleSelected(); // Toggle selection state using the Box's method
                if (box.isSelected()) {
                    // DEBUGGING LINE
                    //////////////////////////////////////////////////////
                    // console.log('adding box to selected list:', box)
                    //////////////////////////////////////////////////////

                    this._selectedBoxesRack.add(box);

                    // DEBUGGING LINE
                    //////////////////////////////////////////////////////
                    // console.log('added to list:', this.selectedBoxes)
                    //////////////////////////////////////////////////////
                } else {
                    this._selectedBoxesRack.delete(box);
                }

                // DEBUGGING LINE
                //////////////////////////////////////////////////////
                // console.log(`Specialized box ${index} clicked ;)`);
                //////////////////////////////////////////////////////

                eventHandlers.click?.(event);
            }
        });
    }

    selectAllRackBoxes() {
        this.boxes.forEach(box => {
            // Only select boxes that aren't already selected
            if (!box.isSelected()) {
                box.toggleSelected(); // This updates both the class and the selected state
                this._selectedBoxesRack.add(box); // Keep track of selected boxes
                
            }
        });
    }

    clearRackSelection() {
        this.boxes.forEach(box => {
            box.clearSelection();
        });
        this._selectedBoxesRack.clear();
        // DEBUGGING LINE
        //////////////////////////////////////////////////////
        // console.log(this.selectedBoxes);
        //////////////////////////////////////////////////////
    }
}


class Box {
    constructor(rowLabel, rackLabel, index, eventHandlers = {}) {
        this.rowLabel = rowLabel;
        this.rackLabel = rackLabel;
        this.index = index;
        this.id = `${rowLabel}-${rackLabel}-${index}`;
        this.ip = this.generateMachineIP();
        this.element = this.createElement();
        this.setEventHandlers(eventHandlers);
        this._isRunning = false
        this._isSelected = false;
    }

    generateMachineIP() {
        const networkBase = "10.10"; // Assuming this method correctly formulates the IP
        return `${networkBase}.${this.rackLabel}.${this.index}`;
    }

    getIp() {
        return this.ip;
    }

    setIp(newIp) {
        const ipRegex = /\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b/; // Regular expression for IPv4 validation
        if (ipRegex.test(newIp)) {
            this.ip = newIp;
        } else {
            console.error("Invalid IPv4 address format");
            // Optionally, you can throw an error or handle the invalid input differently
        }
    }

    createElement() {
        const boxId = this.id;
        const box = document.createElement('div');
        box.className = 'box drag-selectable';
        box.id = boxId;
        box.textContent = this.index; // Assuming this sets the content correctly
        box.setAttribute('data-ip', this.generateMachineIP()); // Correctly storing the IP
        return box;
    }

    setEventHandlers(eventHandlers) {
        Object.keys(eventHandlers).forEach(eventType => {
            this.element.removeEventListener(eventType, this[eventType]); // Remove previous listener if any
            this[eventType] = eventHandlers[eventType]; // Store reference for removal
            this.element.addEventListener(eventType, this[eventType]);
        });
    }

    updateEventHandlers(eventHandlers) {
        this.setEventHandlers(eventHandlers);
    }

    toggleSelected() {
        this._isSelected = !this._isSelected;
        if (this._isSelected) {
            this.element.classList.add('drag-selected');
        } else {
            this.element.classList.remove('drag-selected');
        }
        console.log(`Box ${this.id} selected: ${this._isSelected}`);
    }

    getInfo() {
        const info = {};
        // Iterate over all properties of the instance
        Object.keys(this).forEach((key) => {
            // Add each property to the info object
            info[key] = this[key];
        });
        // Return the info within an object using the box's id as the key
        return { [this.id]: info };
    }

    // Method to add an arbitrary number of key-value pairs as properties
    addProperties(properties) {
        Object.entries(properties).forEach(([key, value]) => {
            this[key] = value;
        });
    }

    getStatus() {
        return this._isRunning
    }

    setStatus(val) {
        this._isRunning = val
    }

    isSelected() {
        return this._isSelected
    }

    clearSelection() {
        if (this._isSelected) { // Check if the box is currently selected
            this._isSelected = false; // Update the selection state to false
            this.element.classList.remove('drag-selected'); // Visually unselect the box
            console.log(`Box ${this.id} selection cleared`);
        }
    }
}







// === FrontEnd\public\MachineControlPanelPage\boxFactory\boxFactoryImp.js ===



// === FrontEnd\public\MachineControlPanelPage\machine-control-panel.html ===

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Box Highlighter</title>
  <link rel="stylesheet" href="styles.css" />

  <!-- Highlight.js styles -->
  <style>
    textarea[is="highlighted-code"] {
      padding: 8px;
    }
  </style>
  <link rel="stylesheet" href="../highlight/styles/obsidian.css" />
  <script src="../highlight/highlight.min.js"></script>
  <script>
    hljs.highlightAll();
  </script>
  <script type="module">
    (async ({ chrome, netscape }) => {
      // add Safari polyfill if needed
      if (!chrome && !netscape)
        await import("https://unpkg.com/@ungap/custom-elements");

      const { default: HighlightedCode } = await import(
        "https://unpkg.com/highlighted-code"
      );

      // bootstrap a theme through one of these names
      // https://github.com/highlightjs/highlight.js/tree/main/src/styles
      HighlightedCode.useTheme("github-dark");
    })(self);
  </script>
</head>

<body>
  <div id="top-level-buttons" class="top-level-buttons">
    <!-- Buttons will be added here dynamically -->
    <!-- <button id="selectAllBtn">Select All</button>
    <button id="clearAllBtn">Clear All</button> -->
    <button id="getNodeStatusBtn">Update Node Status</button>
    <button id="runCustomScriptBtn">Run Custom Script</button>
    <button id="backBtn">Back</button>
    <button id="logoutBtn">Logout</button>
  </div>

  <div id="customScriptModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
        <div id="customScriptModalHeaderContainer">
          <div id="customScriptModalHeader">
            <h2>Custom Script Runner</h2>
          </div>
          <div id="customScriptModalExecutionStatus">Execution Status:</div>
        </div>
      <!-- Tab Menu -->
      <div class="tab">
        <button class="tablinks" onclick="openTab(event, 'BashInput')">
          Bash Input
        </button>
        <button class="tablinks" onclick="openTab(event, 'BashOutput')">
          Bash Output
        </button>
      </div>

      <!-- Bash Input Tab -->
      <div id="BashInput" class="tabcontent">
        <div id="selectedMachines"></div>
        <textarea is="highlighted-code" id="textareaInput" language="bash" cols="80" rows="12"
          placeholder="# Your bash script goes here" style="overflow: auto; width: 100%"></textarea>
        <button id="startCommandBtn">Start</button>
      </div>

      <!-- Bash Output Tab -->
      <div id="BashOutput" class="tabcontent bash-output-container" style="display: none">
        <pre><code>
                <!-- Bash Output -->
            </code></pre>
      </div>
    </div>
  </div>

  <div class="main-container" id="boxFactoryRoot">
    <div id="total-running-machines">Total Running Machines: <span id="running-machines-placeholder">*</span>/<span id="total-machines-placeholder">*</span></div>
    <!-- <div class="section" id="section-A"></div>
    <div class="section" id="section-B"></div> -->
  </div>
  <script src="../scripts/config.js"></script>
  <script src="../bash_cmd.js"></script>
  <script src="./machine-control-panel.js"></script>
  <script src="./api.js"></script>
  <script src="./boxFactory/boxFactory.js"></script>
  <!-- <script type="module">
      import { dragSelect } from "../dragSelect.js";
      import { debugInfo } from "../debug.js";

      globalThis.debugInfo = debugInfo;

      const mainContainer = document.querySelector(".main-container");
      dragSelect(mainContainer, {
        itemSelector: ".drag-selectable", // Ensure your boxes have this class
        areaClassName: "drag-select-area", // Ensure you have CSS for this
      });
    </script> -->

  <!-- TESTING SCRIPT -->
  <!-- <script src="../../TestCode/testBashOutput.js"></script> -->
  <!-- END TESTING -->

  <script>
    function openTab(evt, tabName) {
      // Use const for variables that do not change 
      const tabcontent = document.getElementsByClassName("tabcontent");
      const tablinks = document.getElementsByClassName("tablinks");

      // Use Array.from() to convert HTMLCollections to arrays. This allows use of forEach 
      Array.from(tabcontent).forEach((element) => {
        element.style.display = "none"; // Hide all tab content 
      });

      Array.from(tablinks).forEach((element) => {
        element.classList.remove("active"); // Remove 'active' class from all tabs 
      });

      // Display the selected tab content and add 'active' class to the clicked tab 
      document.getElementById(tabName).style.display = "block";
      evt.currentTarget.classList.add("active");
    }

    // Set default open tab (optional) 
    // Use querySelector to directly click on the default open tab if present 
    document.querySelector(".tablinks.defaultOpen")?.click();


  </script>
  <script>
    
    document.addEventListener("DOMContentLoaded", () => {
      const manager = new BoxContainerManager();
      window.manager = manager; // Make it globally accessible

      // Add a couple of rows with some racks for demonstration purposes
      manager.createRowContainer("section-A", "A1");
      manager.createRowContainer("section-A", "A2");
      manager.createRowContainer("section-B", "B1");
      manager.createRowContainer("section-B", "B2");

      // Now, assuming both RowContainer and RackContainer instances have been properly setup
      // and that boxes have been added to racks in those rows, we update all box behaviors:

      // Get a row and add racks to it
      const rowA1 = manager.getRow("A1");
      const rowA2 = manager.getRow("A2");
      const rowB1 = manager.getRow("B1");
      const rowB2 = manager.getRow("B2");
      
        rowA1.addRack("11", 20, SpecializedRackContainer);
        rowA1.addRack("12", 20, SpecializedRackContainer);
        rowA1.addRack("13", 20, SpecializedRackContainer);
        rowA1.addRack("14", 20, SpecializedRackContainer);

        rowA2.addRack("21", 20, SpecializedRackContainer);
        rowA2.addRack("22", 20, SpecializedRackContainer);
        rowA2.addRack("23", 20, SpecializedRackContainer);
        rowA2.addRack("24", 20, SpecializedRackContainer);
        rowA2.addRack("25", 20, SpecializedRackContainer);

        rowB1.addRack("111", 20, SpecializedRackContainer);
        rowB1.addRack("112", 20, SpecializedRackContainer);
        rowB1.addRack("113", 20, SpecializedRackContainer);

        rowB2.addRack("121", 20, SpecializedRackContainer);
        rowB2.addRack("122", 20, SpecializedRackContainer);
        rowB2.addRack("123", 20, SpecializedRackContainer);
        rowB2.addRack("124", 20, SpecializedRackContainer);
        rowB2.addRack("125", 20, SpecializedRackContainer);


      //console.log(manager);
      //const allInfo = manager.getObjAll();
      //console.log(manager.getIpAll());
    });
  </script>
</body>

</html>


// === FrontEnd\public\MachineControlPanelPage\machine-control-panel.js ===

document.addEventListener("DOMContentLoaded", async () => {

  // REFACTOR CODE //
  /////////////////////////////////////////////////////

  function updateTotalMachines(runningMachines, totalMachines) {
    const runningMachinesPlaceholder = document.getElementById("running-machines-placeholder");
    const totalMachinesPlaceholder = document.getElementById("total-machines-placeholder");

    // Update the placeholders with the actual values or '*' if they don't have a value
    runningMachinesPlaceholder.textContent = runningMachines !== undefined ? runningMachines : '*';
    totalMachinesPlaceholder.textContent = totalMachines !== undefined ? totalMachines : '*';
  }

  async function initializeBoxState() {
    let boxState;
    try {
      boxState = await loadBoxState();
      // Proceed with operations that depend on boxState
      const runningMachines = countRunningMachines(boxState);
      const totalMachines = manager.getMachineCount();
      updateTotalMachines(runningMachines, totalMachines);
    } catch (error) {
      console.error(error);
      // Handle error, possibly updating the UI to reflect the failure
    }
  }

  // Call initializeBoxState without awaiting it, allowing the DOMContentLoaded event to complete.
  initializeBoxState();
  //////////////////////////////////////////////////////

  const runCustomScriptBtn = document.getElementById("runCustomScriptBtn");
  const customScriptModal = document.getElementById("customScriptModal");
  const textareaContainer = document.getElementById("textareaContainer");
  const textareaInput = document.getElementById("textareaInput");
  const closeBtn = customScriptModal.querySelector(".close");
  const startCommandBtn = document.getElementById("startCommandBtn");
  const updateNodesBtn = document.getElementById("getNodeStatusBtn");
  const logoutBtn = document.getElementById('logoutBtn');
  const selectAllBtn = document.getElementById('selectAllBtn');
  const clearAllBtn = document.getElementById('clearAllBtn');

  runCustomScriptBtn.addEventListener("click", () => {
    customScriptModal.style.display = "block";
    displaySelectedMachines();
  });

  closeBtn.addEventListener("click", () => {
    customScriptModal.style.display = "none";
  });

  window.onclick = (event) => {
    //console.log(event.target);
    if (event.target == customScriptModal && !isMouseDownInsideTextarea) {
      customScriptModal.style.display = "none";
    }
  };

  let isMouseDownInsideTextarea = false;

  window.addEventListener("mousedown", (event) => {
    // console.log(event.target);
    if (event.target == textareaContainer || event.target == textareaInput) {
      // console.log("Mouse down inside textarea");
      isMouseDownInsideTextarea = true;
    } else isMouseDownInsideTextarea = false;
  });

  function openTab(evt, tabName) {
    // Use const for variables that do not change
    const tabcontent = document.getElementsByClassName("tabcontent");
    const tablinks = document.getElementsByClassName("tablinks");

    // Use Array.from() to convert HTMLCollections to arrays. This allows use of forEach
    Array.from(tabcontent).forEach((element) => {
      element.style.display = "none"; // Hide all tab content
    });

    Array.from(tablinks).forEach((element) => {
      element.classList.remove("active"); // Remove 'active' class from all tabs
    });

    // Display the selected tab content and add 'active' class to the clicked tab
    document.getElementById(tabName).style.display = "block";
    evt.currentTarget.classList.add("active");
  }

  // Set default open tab (optional)
  // Use querySelector to directly click on the default open tab if present
  document.querySelector(".tablinks.defaultOpen")?.click();

  function displaySelectedMachines() {
    const selectedMachinesDiv = document.getElementById("selectedMachines");
    selectedMachinesDiv.innerHTML = ""; // Clear previous content
    const selectedIPs = manager.getSelectedBoxesIps();

    // Use the manager object to find selected machines
    selectedIPs.forEach(ip => {
      const machineDiv = document.createElement("div");
      machineDiv.textContent = `Machine IP: ${ip}`; // Use the IP directly
      selectedMachinesDiv.appendChild(machineDiv);
    });
  }
  // Add an event listener for the click event on the logout button
  logoutBtn.addEventListener('click', async function () {
    console.log("Logging out...");
    // Retrieve the token from localStorage
    const token = localStorage.getItem('token');

    // If a token exists, send a logout request to the server
    if (token) {
      await fetch('/logout', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      // Regardless of the server's response, remove the token from localStorage
      localStorage.removeItem('token');
    }

    // Redirect the user to the login page
    window.location.href = '/LoginPage/login.html';
  });

  // selectAllBtn.addEventListener("click", () => {
  //   console.log(manager.selectAllBoxes(),'selectAllBtn clicked')
  //   // manager.selectAllBtn()
  // })

  // clearAllBtn.addEventListener("click", () => {
  //   console.log(manager.clearAllSelection(),'clearAllBtn clicked')
  //   // manager.clearAllBtn()
  // })

  let commandExecutions = {
    completed: [],
    pending: []
};

startCommandBtn.addEventListener("click", async () => {
  console.log('running start command');
  const bashCode = document.getElementById("textareaInput").value;
  const ipsString = manager.getSelectedBoxesIps();

  console.log("Sending Bash Script and IPs to server:", bashCode, ipsString);

  // Utility function to append messages to the modal
  const updateExecutionStatus = (message, isError = false) => {
      const statusDiv = document.getElementById("customScriptModalExecutionStatus");
      const messageElement = document.createElement("div");
      messageElement.textContent = message;
      if (isError) {
          // messageElement.style.color = "red";
      } else {
        statusDiv.appendChild(messageElement);
      }
  };

  const executeCommand = async () => {
      try {
          const result = await executeScript(ipsString, bashCode);
          console.log("Execution Result:", result);
          displayBashOutput(result);
          console.log("after");
          return {status: 'completed', result};
      } catch (error) {
          console.error("Error executing script:", error);
          throw {status: 'failed', error}; // Include status in thrown error for consistency
      }
  };

  const handleCompletion = (index, result) => {
      commandExecutions.completed.push({index, ...result});
      commandExecutions.pending = commandExecutions.pending.filter(item => item !== index);
      if (result.status === 'completed') {
          updateExecutionStatus(`Command ${index} completed successfully.`);
      } else {
          updateExecutionStatus(`Command ${index} failed: ${result.error}`, true);
      }
  };

  const commandIndex = commandExecutions.pending.length + commandExecutions.completed.length;
  commandExecutions.pending.push(commandIndex);

  // Append initial pending status
  updateExecutionStatus(`Command ${commandIndex} is pending execution.`);

  executeCommand().then(result => {
      console.log(`Command ${commandIndex} completed`, result);
      handleCompletion(commandIndex, result);
  }).catch(error => {
      console.error(`Command ${commandIndex} failed`, error);
      handleCompletion(commandIndex, error);
  });

  console.log(`Command ${commandIndex} is being executed`);
  console.log('current commands:', commandExecutions);
});


  updateNodesBtn.addEventListener("click", async () => {
      const ipsString = manager.getIpAll();
      const bashCode = getNicInfoString()

      console.log("Sending Node Info to /execute-script:", bashCode, ipsString);
      // return
      try {
        const executeResult = await executeScript(ipsString, bashCode);
        console.log('pre exe', executeResult);
        const mappedInfo = processExecutionResult(executeResult)

        console.log("Execution Result:", mappedInfo);
        displayBashOutput(Object.values(mappedInfo));
        const mappedArrayFormatted = reformatJsonArray(Object.values(mappedInfo));
        // Forwarding the response to another endpoint
        console.log('formateed arr', mappedArrayFormatted);
        const updateResult = await updateMachineState(mappedArrayFormatted);
        console.log("Update Machine State Result:", updateResult);
      } catch (error) {
        console.error("Error in processing:", error);
      }
    });


  function displayBashOutput(mappedArray) {
    const bashOutputContainer = document.getElementById("BashOutput");
    bashOutputContainer.innerHTML = ""; // Clear existing content

    mappedArray.forEach((item, index) => {
      const obj = item.data; // Data is nested under 'data'
      const id = obj.ip; // IP is now under obj.data.ip

      // Check if the item is in the first format with a unique key
      if (Object.keys(item).length === 1 && Object.keys(item)[0] !== "ip") {
        id = Object.keys(item)[0];
        obj = item[id];
      } else {
        // Assume it's in the second format
        obj = item;
        id = obj.ip;
      }

      const elementId = `collapse-${index}`;
      const wrapperDiv = document.createElement("div");
      wrapperDiv.classList.add("collapsible-wrapper");

      const button = document.createElement("button");
      button.textContent = id + (obj.error ? ` - Error` : ` - Result`);
      button.classList.add("collapsible-btn");
      button.setAttribute("type", "button");
      button.setAttribute("data-target", elementId);

      const contentDiv = document.createElement("div");
      contentDiv.id = elementId;
      contentDiv.classList.add("collapsible-content");
      contentDiv.style.display = "none"; // Initially hidden

      const pre = document.createElement("pre");
      const code = document.createElement("code");
      code.className = "language-bash"; // Ensure this class is set for Highlight.js

      // Handle content based on whether it's an error or a result
      if (obj.error) {
        code.textContent = `Error: ${obj.error}`;
      } else if (obj.result && obj.result.cmd) {
        code.textContent = `IP: ${id}\nCommand:\n${obj.result.cmd}\nOutput:\n${obj.result.output}`;
      } else {
        code.textContent = `No detailed information available.`;
      }

      pre.appendChild(code);
      contentDiv.appendChild(pre);
      wrapperDiv.appendChild(button);
      wrapperDiv.appendChild(contentDiv);
      bashOutputContainer.appendChild(wrapperDiv);

      button.addEventListener("click", function () {
        const target = document.getElementById(this.getAttribute("data-target"));
        if (target.style.display === "none") {
          target.style.display = "block";
          // Apply highlighting when the content is shown
          hljs.highlightElement(code); // Make sure to highlight after appending
        } else {
          target.style.display = "none";
        }
      });
    });
  }
});


async function applyBoxState(savedStates) {
  try {
    // Fetch the hardware information from the API

    const DC02_HARDWARE = await fetchHardwareInfo();
    let a = checkBoxPosition(DC02_HARDWARE, savedStates);
    console.log('mismatched', a)
    document.querySelectorAll(".box").forEach((box) => {
      const boxState = savedStates.find((state) => state.machine_id === box.id);

      // Clear previous mismatch class if any
      box.classList.remove("box_mismatch");

      // Apply colors based on saved states, if available
      if (boxState && boxState.data.color) {
        box.style.backgroundColor = boxState.data.color;
      } else {
        box.style.backgroundColor = ""; // Set to your default color or remove the style
      }

      // Check if the box ID is in the mismatch array and add 'box_mismatch' class
      const isMismatched = a.some((mismatch) =>
        mismatch.hasOwnProperty(box.id)
      );
      if (isMismatched) {
        box.classList.add("box_mismatch");
      }
    });
  } catch (error) {
    console.error("Error fetching hardware information:", error);
  }
}

function generateIdFromIp(ip) {
  const octets = ip.split(".").map(Number);
  if (octets.length !== 4) {
    throw new Error("Invalid IP address format");
  }

  const [network1, network2, thirdOctet, machineNumber] = octets;

  // Determine if third octet is in the specified range for Section A
  const sectionARange = [11, 12, 13, 14, 21, 22, 23, 24, 25];
  const sectionBRange = [111, 112, 113, 121, 122, 123, 124, 125];
  let section;
  if (sectionARange.includes(thirdOctet)) {
    section = "A";
  } else if (sectionBRange.includes(thirdOctet)) {
    section = "B";
  } else {
    section = "Unknown";
  }

  // Determine the number based on the range of the third octet
  let number;
  if (
    (thirdOctet >= 11 && thirdOctet <= 19) ||
    (thirdOctet >= 111 && thirdOctet <= 119)
  ) {
    number = 1;
  } else if (
    (thirdOctet >= 21 && thirdOctet <= 29) ||
    (thirdOctet >= 121 && thirdOctet <= 129)
  ) {
    number = 2;
  } else {
    number = "Unknown"; // Placeholder, adjust as needed
  }

  // Construct the ID
  const id = `${section}${number}-${thirdOctet}-${machineNumber}`;
  return id;
}

function reformatJsonArray(jsonArray, outputFile = null) {
  /*
    Transforms the input JSON array by filtering out entries with errors and reformatting the ethernet interface data.

    Example Transformation:

    Before:
    [{
      "machine1": {
        "ip": "192.168.1.1",
        "error": false,
        "result": {
          "cmd": "ip addr",
          "output": "eth0: 00:1A:2B:3C:4D:5E\neth1: 5F:4E:3D:2C:1B:0A"
        },
        "color": "green"
      }
    }]

    After:
    [{
      "machine1": {
        "ip": "192.168.1.1",
        "ethernet_interfaces": {
          "MAC (NIC-1) eth0": "00:1A:2B:3C:4D:5E",
          "MAC (NIC-2) eth1": "5F:4E:3D:2C:1B:0A"
        },
        "color": "green"
      }
    }]
  */

  // Reformats jsonArray, focusing on ethernet interface data and filtering out errors
  const reformattedArray = jsonArray
    // .filter((obj) => !obj[Object.keys(obj)[0]].error) // Filter out objects with "error" attribute
    .map((obj) => {
      const key = Object.keys(obj)[0]; // The ID of the machine
      const data = obj[key];
      if (data.result) {
        const { cmd, output } = data.result; // cmd is the executed command, output is its stdout
        const ethInterfaces = {};
        // Split the output by new lines, then map each line to a key-value pair under ethInterfaces
        output.split("\n").forEach((line) => {
          const [iface, mac] = line.split(": ");
          ethInterfaces[
            `MAC (NIC-${Object.keys(ethInterfaces).length + 1}) ${iface}`
          ] = mac;
        });
        return {
          [key]: {
            ip: data.ip, // IP address of the machine
            ethernet_interfaces: ethInterfaces, // Formatted ethernet interface data
            color: data.color, // Color coding (e.g., for error status)
          },
        };
      } else {
        return obj; // Return original object if no result data is present
      }
    });

  // Writes the reformatted array to a file if outputFile is specified
  if (outputFile) {
    fs.writeFileSync(outputFile, JSON.stringify(reformattedArray, null, 2));
  }

  return reformattedArray;
}

function checkBoxPosition(dcHardware, jsonArray) {
  if (dcHardware.length !== jsonArray.length) {
    throw new Error("The lengths of DC02_HARDWARE and JSON_ARRAY do not match.");
  }
  console.log(jsonArray)
  // Convert JSON_ARRAY to a lookup table by box ID for faster access
  const jsonArrayLookup = jsonArray.reduce((acc, item) => {
    acc[item.machine_id] = item.data;
    return acc;
  }, {});

  const mismatchedBoxes = dcHardware.map(boxData => {
    const boxId = boxData.machine_id;
    const jsonBoxData = jsonArrayLookup[boxId];
    if (!jsonBoxData) {
      console.error(`Matching entry for ${boxId} not found in JSON_ARRAY.`);
      return null; // Skipping unmatched boxData, might adjust based on requirements
    }

    // Access 'ethernet_interfaces' within the 'data' structure
    const ethernetInterfaces1 = boxData.data.ethernet_interfaces;
    const ethernetInterfaces2 = jsonBoxData.ethernet_interfaces;

    if (!ethernetInterfaces1 || !ethernetInterfaces2) return null;

    // Combine MAC address processing steps and compare
    const correctMacs = Object.values(ethernetInterfaces1).map(mac => mac.toLowerCase().trim());
    const actualMacs = Object.values(ethernetInterfaces2).map(mac => mac.toLowerCase().trim());

    const isMismatch = !correctMacs.some(mac => actualMacs.includes(mac));
    if (isMismatch) {
      const mismatchedMac = actualMacs.find(mac => !correctMacs.includes(mac)) || actualMacs[0]; // Assuming at least one MAC address is present
      const machineId = findMachineIdByMac(dcHardware, mismatchedMac);
      return {
        [boxId]: {
          correct_macs: ethernetInterfaces1,
          actual_macs: ethernetInterfaces2,
          msg: machineId
            ? `The MAC '${mismatchedMac}' is supposed to be in machine ${machineId}`
            : `No machines on the network have the following NICs: ${mismatchedMac}`
        }
      };
    }
    return null;
  }).filter(box => box !== null); // Remove nulls from mismatches

  return mismatchedBoxes;
}

function findMachineIdByMac(data, mac) {
  // console.log(data[101])
  for (const entry of data) {
    const id = entry.machine_id;
    const info = entry.data;
    if (info.ethernet_interfaces) {
      const macs = Object.values(info.ethernet_interfaces).map((mac) =>
        mac.toLowerCase().trim()
      );
      if (macs.includes(mac)) {
        return id;
      }
    }
  }
  return 0; // Return 0 if no matching machine ID is found to indicate that no network machines have the given NICs
}

function processExecutionResult(executeResult) {
  const mappedInfo = executeResult.map(({ ip, ...rest }) => {
    const id = generateIdFromIp(ip); // Generate ID based on the IP
    return {
      [id]: { // Use computed property names to set the key
        ip,
        ...rest,
        color: rest.error ? "red" : "green", // Assign color based on error presence
      }
    };
  });

  return mappedInfo;
}

function countRunningMachines(jsonData) {
  let greenCounter = 0;

  // Iterate over each object in the array
  jsonData.forEach(obj => {
    // Iterate over the properties of each object
    Object.values(obj).forEach(value => {
      // Check if the color property is "green"
      if (value.color === "green") {
        greenCounter++;
      }
    });
  });

  return greenCounter;
}


// === FrontEnd\public\MachineControlPanelPage\styles.css ===

body {
  background-color: #1a1a1a; /* Dark gray background */
  color: #ffffff; /* White text color for better contrast */
  /* min-height: 100vh; 100% of the viewport height */
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  justify-content: center;
  border: 2px solid white;
}

.main-container {
  display: flex; /* Use flexbox to make sections side by side */
    flex-wrap: wrap;
    justify-content: center;
    border: 2px solid white;
}

.section-container {
  display: flex;
  justify-content: space-between;
  position: relative;
  padding: 20px;
  border: 2px solid white;
}

.section {
  width: 48%;
  border: 2px solid white;
  padding: 50px;
  display: flex;
  /* flex-wrap: wrap; */
  justify-content: center;
}

/* REFACTOR */
/* //////////////////////////////////////// */
div#sectionHeader,#total-running-machines{
  display: flex;
    justify-content: center;
    align-items: center;
}
/* //////////////////////////////////////// */
.parent-box,
.rack-container {
  border: 2px solid white;
  margin-right: 10px;
  /* Space between boxes of the same row */
  padding: 10px;
  margin: 10px;
  flex: 0 0 auto;
  /* Prevent stretching */
}

.labels,
.box-container-header,
.button {
  margin-bottom: 10px;
  display: flex;
  /* Enable flexbox layout */
}

.boxes-container {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  gap: 5px;
}

.box {
  display: inline-block;
  border: 1px solid grey;
  text-align: center;
  height: 20px;
  width: 20px;
  padding: 10px;
  cursor: pointer;
  flex: 0 0 auto;
  /* Prevent boxes from stretching */
  -webkit-user-select: none;
  /* Safari */
  -moz-user-select: none;
  /* Firefox */
  -ms-user-select: none;
  /* Internet Explorer/Edge */
  user-select: none;
  /* Non-prefixed version, currently supported by Chrome, Opera and Edge */
}

.row-container {
  /* display: flex;
  flex-wrap: wrap; */
  margin-bottom: 10px;
  margin-bottom: 50px;
}

.header-row-span,
.header-rack-span {
  flex: 1;
  /* Each element takes equal space */
  text-align: center;
  /* Center the text */
}

.top-level-buttons {
  display: flex;
  justify-content: center;
  margin-top: 10px;
  /* Adjust as needed */
}

.top-level-buttons button {
  margin: 5px;
  padding: 10px 15px;
  background-color: #4caf50;
  /* Green background */
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
}

.top-level-buttons button:hover {
  background-color: #45a049;
  /* Darker green on hover */
}

.box-reset-button {
  margin: 5px;
  padding: 10px 15px;
  background-color: #4caf50;
  /* Green background */
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
}

.green {
  background-color: green;
}

.yellow {
  background-color: yellow;
}

.red {
  background-color: red;
}

.none {
  background-color: transparent;
  /* or any default color */
}

/* The switch - the box around the slider */
.switch {
  position: relative;
  display: inline-block;
  width: 60px;
  height: 34px;
}

/* Hide default checkbox */
.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

/* The slider */
.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  -webkit-transition: 0.4s;
  transition: 0.4s;
}

.slider:before {
  position: absolute;
  content: "";
  height: 26px;
  width: 26px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  -webkit-transition: 0.4s;
  transition: 0.4s;
}

input:checked+.slider {
  background-color: #2196f3;
}

input:focus+.slider {
  box-shadow: 0 0 1px #2196f3;
}

input:checked+.slider:before {
  -webkit-transform: translateX(26px);
  -ms-transform: translateX(26px);
  transform: translateX(26px);
}

/* Rounded sliders */
.slider.round {
  border-radius: 34px;
}

.slider.round:before {
  border-radius: 50%;
}

#overlay {
  display: none;
  /* Hidden by default */
  position: absolute;
  /* Sit on top of the page content */
  flex-direction: column;
  /* Stack children vertically */
  align-items: center;
  /* Center children horizontally */
  width: 100%;
  /* Full width (cover the whole page) */
  height: 100%;
  /* Full height (cover the whole page) */
  top: 0;
  left: 0;
  right: 0;
  background-color: rgba(0, 0, 0, 0.5);
  /* Black background with opacity */
  z-index: 2;
  /* Specify a stack order in case you're using a different order for other elements */
  cursor: pointer;
  /* Add a pointer on hover */
}

.loading-text {
  color: white;
  /* White text */
  font-weight: bold;
  /* Bold text */
  font-size: 2em;
  /* Larger text size */
  text-align: center;
  /* Center the text horizontally */
  margin-bottom: 20px;
  /* Space between text and waves */
  margin-top: 400px;
}

.center {
  height: auto;
  display: flex;
  justify-content: center;
  align-items: center;
}

.wave {
  width: 5px;
  height: 100px;
  background: linear-gradient(45deg, rgb(0, 255, 21), #00c8ff);
  margin: 10px;
  animation: wave 1s linear infinite;
  border-radius: 20px;
  -webkit-border-radius: 20px;
  -moz-border-radius: 20px;
  -ms-border-radius: 20px;
  -o-border-radius: 20px;
}

.wave:nth-child(2) {
  animation-delay: 0.1s;
}

.wave:nth-child(3) {
  animation-delay: 0.2s;
}

.wave:nth-child(4) {
  animation-delay: 0.3s;
}

.wave:nth-child(5) {
  animation-delay: 0.4s;
}

.wave:nth-child(6) {
  animation-delay: 0.5s;
}

.wave:nth-child(7) {
  animation-delay: 0.6s;
}

.wave:nth-child(8) {
  animation-delay: 0.7s;
}

.wave:nth-child(9) {
  animation-delay: 0.8s;
}

.wave:nth-child(10) {
  animation-delay: 0.9s;
}

@keyframes wave {
  0% {
    transform: scale(0);
  }

  50% {
    transform: scale(1);
  }

  100% {
    transform: scale(0);
  }
}

.drag-selectable-wrap {
  margin: 15px 150px;
  width: 535px;
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
  justify-content: center;
  align-items: center;
}

.drag-select-area {
  background-color: hsl(210deg 80% 50% / 50%);
  border: 1px solid hsl(210deg 80% 50% / 75%);
  box-sizing: border-box;
}

.drag-selected {
  border: 2px solid #11e1ff;
  /* match border thickness to outline width. */
  margin: -2px;
}

/* TEMPORARY */
.modal {
  display: none;
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgb(0, 0, 0);
  background-color: rgba(0, 0, 0, 0.4);
}

.modal-content {
  background-color: #000000e0;
  margin: 15% auto;
  padding: 20px;
  border: 1px solid #888;
  width: 80%;
}

.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}

textarea {
  overflow: auto;
  width: 95%;
  height: 150px;
  margin-top: 10px;
  max-width: 90%;
  height: 100%;
}

.textarea-container {
  display: flex;
  flex-direction: column;
}

#startCommandBtn {
  align-self: flex-end;
}

.box_mismatch {
  outline: 5px solid rgb(255, 0, 0);
  /* Adjust the border width as needed */
}


#customScriptModalHeaderContainer {
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  align-items: center;
  margin-bottom: 10px;
}


// === FrontEnd\public\RegisterPage\register.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Design by foolishdeveloper.com -->
    <title>Register</title>

    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="css/styles.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;600&display=swap" rel="stylesheet">
    <!--Stylesheet-->
</head>
<body>
    <div class="background">
        <div class="shape"></div>
        <div class="shape"></div>
    </div>
    <form id="registerForm"> <!-- Changed ID to registerForm -->
        <h3>Register Here</h3>
    
        <label for="username">Username</label>
        <input type="text" placeholder="Email" id="username" name="username">
    
        <label for="password">Password</label>
        <input type="password" placeholder="Password" id="password" name="password">
    
        <label for="confirmPassword">Confirm Password</label>
        <input type="password" placeholder="Confirm Password" id="confirmPassword" name="confirmPassword"> <!-- Updated ID and Name -->
    
        <button type="submit">Register</button>
        <button type="button" id="loginBtn">Login</button>
        <div class="social">
            <div class="go"><i class="fab fa-google"></i>  Google</div>
            <div class="fb"><i class="fab fa-facebook"></i>  Facebook</div>
        </div>
    </form>
    
    <script src="../scripts/config.js"></script>
    <script src="./register.js"></script> <!-- Make sure this path is correct -->
    </body>
</html>


// === FrontEnd\public\RegisterPage\register.js ===

document.getElementById('registerForm').addEventListener('submit', async (event) => {
    event.preventDefault(); // Prevent the form from submitting the traditional way
    
    const formData = new FormData(event.target);
    const email = formData.get('username'); // Assuming 'username' is the field name for email
    const password = formData.get('password');
    const confirmPassword = document.getElementById('confirmPassword').value;

    // Check if any of the fields are empty
    if (!email.trim() || !password.trim() || !confirmPassword.trim()) {
        alert('Please fill out all fields.');
        return; // Stop further execution if any field is empty
    }

    // Check if passwords match
    if (password !== confirmPassword) {
        alert('Passwords do not match. Please try again.');
        return; // Stop further execution if passwords do not match
    }

    const bodyData = { email, password };
    console.log('bodydata', bodyData);

    try {
        const response = await fetch(`http://${config.BACKEND_SERVER_IP}/register`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(bodyData)
        });

        // Check if the response is JSON
        const contentType = response.headers.get("content-type");
        if (contentType && contentType.indexOf("application/json") !== -1) {
            const responseData = await response.json(); // Safely parsing the JSON

            if (response.status === 202 && responseData.message === 'Sign-up request submitted. Please wait for administrator approval.') {
                alert('Sign-up request submitted. Please wait for administrator approval.');
                window.location.href = './login.html';
            } else {
                // Handle other server-side messages
                alert(responseData.message || 'Registration failed. Please try again.');
            }
        } else {
            // If response is not JSON
            const textResponse = await response.text();
            alert(textResponse || 'An unexpected error occurred.');
        }
    } catch (error) {
        console.error('There was an error:', error);
        alert('There was an error processing your registration. Please try again.');
    }
});

document.getElementById('loginBtn').addEventListener('click', function() {
    window.location.href = '../LoginPage/login.html'; // Navigate to login.html
});


// === FrontEnd\public\scripts\api.js ===

async function executeScript(ipsString, bashCode) {
    const executeScriptUrl = `http://${config.SSH_SERVER_IP}/execute-script`;
    try {
      const response = await fetch(executeScriptUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ ips: ipsString, script: bashCode }),
      });
      const data = await response.json();
      return data; // Return the JSON response
    } catch (error) {
      console.error("Error in executing script:", error);
      throw error; // Rethrow the error to handle it in the calling context
    }
  }
  
  async function updateMachineState(mappedArrayFormatted) {
    const updateStateUrl = `http://${config.BACKEND_SERVER_IP}/interact/update-machine-state`;
    try {
      const response = await fetch(updateStateUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(mappedArrayFormatted),
      });
      const data = await response.json();
      return data; // Return the JSON response
    } catch (error) {
      console.error("Error in updating machine state:", error);
      throw error; // Rethrow the error to handle it in the calling context
    }
  }

  async function fetchHardwareInfo() {
    const apiEndpoint = `http://${config.BACKEND_SERVER_IP}/interact/dc02-hardware-info`;
    const response = await fetch(apiEndpoint);
    if (!response.ok) {
      throw new Error(`Failed to fetch state: ${response.statusText}`);
    }
    return response.json();
  }

  async function loadBoxState() {
    const apiUrl = `http://${config.BACKEND_SERVER_IP}/interact/load-machine-state`;
  
    try {
      const response = await fetch(apiUrl);
      if (!response.ok) {
        throw new Error("Failed to fetch state");
      }
  
      const data = await response.json();
      // Assuming applyBoxState correctly handles the array structure of data
      if (Array.isArray(data)) {
        applyBoxState(data);
        
	    return data;
      } else console.error('data object is not an array:', data);
    } catch (error) {
      console.error("Error loading state:", error);
    }
  }
  
async function checkNH_Rigs() {
    // const apiEndpoint = `http://${config.SSH_SERVER_IP}/get-nh-rig-status`;
    const apiEndpoint = `http://localhost:5001/get-nh-rig-status`;
    const response = await fetch(apiEndpoint);
    if (!response.ok) {
      throw new Error(`Failed to fetch state: ${response.statusText}`);
    }
    rigs = await response.json();
    const rigsNotMining = rigs.filter(rig => rig.minerStatus !== 'MINING');
    console.log("Rigs Not Mining:", rigsNotMining);
}

checkNH_Rigs()

// === FrontEnd\public\scripts\auth.js ===

function isTokenExpired(token) {
    if (!token) return true;
  
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const payload = JSON.parse(atob(base64));
    const exp = payload.exp;
    const currentTime = Date.now() / 1000;
    console.log(exp, currentTime)
  
    return exp < currentTime;
  }
  
  function checkAndHandleTokenExpiration() {
    // USED FOR TESTING UNCOMMENT LINE BELOW FOR PRODUCTION
    const token = localStorage.getItem('token');
    if (!token || isTokenExpired(token)) {
      alert('Session expired. Please log in again.');
      localStorage.removeItem('token'); // Remove the expired or invalid token
      window.location.href = '/LoginPage/login.html';
      return true; // Indicate that the token has expired
    }
    return false; // Token is still valid
  }

  function parseJwt(token) {
    try {
      const base64Url = token.split('.')[1];
      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
      return JSON.parse(window.atob(base64)).exp;
    } catch (error) {
      return null;
    }
  }

// === FrontEnd\public\scripts\config.js ===

// config.js
const config = {
  production: {
    BACKEND_SERVER: '10.10.250.101:3000',
    FRONTEND_SERVER: '10.10.250.101:5500',
    SSH_SERVER: '10.10.250.101:5000',
  },
  development: {
    BACKEND_SERVER: 'localhost:3000',
    FRONTEND_SERVER: 'localhost:5500',
    SSH_SERVER: 'localhost:5000',
  }
  };

  prod = config.production
  dev = config.development
   
  


// === FrontEnd\server.js ===

// CHECK IF COMPUTER OS IS COMPATIBLE
//////////////////////////////////////////////////
import checkOS from '../Utils/chk_os.js';

checkOS();

//////////////////////////////////////////////////

import config from '../Config/config.js';

checkOS();

import express from 'express';
import path from 'path';
const app = express();
import cors from 'cors';
import { fileURLToPath } from 'url';

app.use(cors()); // Enable CORS for all routes

// Get the directory name using import.meta.url
const __dirname = path.dirname(fileURLToPath(import.meta.url));
// Serve static files from the 'public' directory
app.use(express.static(path.join(__dirname, 'public')));
console.log('server.js dir:', path.join(__dirname, 'public'))

// Route to serve the home.html file
app.get('/', (req, res) => {
   // res.redirect('/LoginPage/login.html');
   res.redirect('/MachineControlPanelPage/machine-control-panel.html');
});


app.listen(config.FRONTEND_SERVER_PORT, () => {
    console.log(`Server started on port ${config.FRONTEND_SERVER_PORT}`);
});


// === output.txt ===



// === .env ===



// === .vscode\launch.json ===

{
    "version": "0.2.0",
    "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "Launch Program",
            "skipFiles": ["<node_internals>/**"],
            "cwd": "${workspaceFolder}/BackEnd",
            "program": "${workspaceFolder}/BackEnd/server.js"
        }
    ]
}


// === .vscode\settings.json ===

{
    "liveServer.settings.port": 5502,
    "eslint.options": {
        "plugins": ["import"],
        "rules": {
          "import/no-unresolved": 2,
          "import/no-commonjs": 2,
          "import/extensions": [2, "ignorePackages"]
        }
    },
    "eslint.codeActionsOnSave.rules": null,
    
}

// === BackEnd\.env ===

REMOVED_JWT_SECRET=oQQMGP1XCJq0puu8BBmXsAEdyqZif95scJ9HzgrqFEE
REMOVED_RBM_MONITER_API = http://10.10.111.3:4000/remoteminers

DB_USER=postgres
DB_HOST=localhost
DB_NAME=node_watchman_db
DB_PASSWORD=postgres
DB_PORT=5432


// === BackEnd\app.js ===

import express from 'express';
const app = express();
import cors from "cors";


import router from './router.js';

app.use(cors()); // Enable CORS for all routes
app.use(express.json({ limit: '50mb' }));

app.use('/', router);

app.get('/', (req, res) => {
  res.send('hello from express server');
});

export default app;

// === BackEnd\auth\auth.js ===

import { promises as fs } from 'fs';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import rateLimit from 'express-rate-limit';
import nodemailer from 'nodemailer';

// Nodemailer transporter setup
const transporter = nodemailer.createTransport({
    service: 'Gmail',
    auth: {
      user: 'datacare234@gmail.com', // Your email address
      pass: 'uftx faiu skyc babj' // Your email password
    }
  });

const limiter = rateLimit({
    windowMs: 1 * 60 * 1000, // 1 minute
    max: 3, // Limit to 3 requests per window
    handler: function (req, res /*, next */) {
      const resetTime = new Date(parseInt(res.getHeaders()["x-ratelimit-reset"]) * 1000);
      const currentTime = new Date();
      const timeToWait = Math.ceil((resetTime - currentTime) / 1000); // Time in seconds
      res.status(429).json({
        message: `Too many requests. Please try again in ${timeToWait} seconds.`
      });
    }
  });
  let tokenBlacklist = {};

function authenticateToken(req, res, next) {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];
    console.log(token)

    if (token == null) return res.status(401).send('Token is required');

    jwt.verify(token, REMOVED_JWT_SECRET, (err, user) => {
        if (err) return res.status(403).send('Token is invalid or expired');
        req.user = user;
        next();
    });
}

function checkAdmin(req, res, next) {
    // Assumes req.user is set by authenticateToken
    if (!req.user || !req.user.isAdmin) {
        return res.status(403).send('Access denied');
    }
    next(); // User is admin, proceed to the next middleware
}


function blacklistToken(token) {
    // Assume the token has a certain expiration time, e.g., 1 hour
    const EXPIRY_TIME_IN_MS = 3600 * 1000; // 1 hour in milliseconds

    // Add the token to the blacklist
    tokenBlacklist[token] = true;

    // Set a timeout to remove the token from the blacklist after it expires
    setTimeout(() => {
        delete tokenBlacklist[token];
    }, EXPIRY_TIME_IN_MS);
}

function checkBlacklist(req, res, next) {
    const authHeader = req.headers['authorization'];
    if (!authHeader) {
        return res.status(401).send('No token provided');
    }

    const token = authHeader.split(' ')[1];
    if (tokenBlacklist[token]) {
        return res.status(401).send('Token has been invalidated');
    }

    next();
}

// Function to ensure a file exists, and create it with default content if it doesn't
async function ensureFileExists(filePath, defaultContent) {
    try {
        const fileExists = await fs.access(filePath).then(() => true).catch(() => false);
        if (!fileExists) {
            await fs.writeFile(filePath, defaultContent);
        }
    } catch (err) {
        console.error(`Error ensuring file exists: ${filePath}`, err);
    }
}



async function createAdminUser() {
    const email = 'bradenacurtis801@gmail.com';
    const username = 'bradenacurtis801';
    const password = 'wpkf0224'; // Choose a strong, secure password
    const hashedPassword = await bcrypt.hash(password, 10);

    const User = {
        email,
        username,
        hashedPassword,
        isAdmin: true
    };

    // Attempt to read the existing admins file
    let users;
    try {
        const data = await fs.readFile(USERS_FILE, 'utf8');
        users = JSON.parse(data);
    } catch (error) {
        if (error.code === 'ENOENT') {
            // File does not exist, start with an empty array
            users = [];
        } else {
            // Rethrow any other error
            throw error;
        }
    }

    // Check if the admin user already exists
    const existingUser = users.find(users => users.email === email);
    if (existingUser) {
        console.log('User already exists.');
        return; // Stop execution if the admin already exists
    }

    // Add the new admin user to the array
    users.push(User);

    // Save the updated admins array back to the file
    await fs.writeFile(USERS_FILE, JSON.stringify(users, null, 2));

    console.log('Admin user created successfully.');
}

//   createAdminUser().catch(console.error);

export default { authenticateToken, checkAdmin, checkBlacklist, blacklistToken }

// === BackEnd\db\db.js ===

// db.js

import pg from 'pg';
import dotenv from 'dotenv';

dotenv.config({ path: '../.env' });

const { Pool } = pg; // Destructure Pool from pg

const pool = new Pool({
    user: process.env.DB_USER,
    host: process.env.DB_HOST,
    database: process.env.DB_NAME,
    password: process.env.DB_PASSWORD,
    port: process.env.DB_PORT, // PostgreSQL default port
    ssl: false // Set to true if using SSL
});

export default pool;


// === BackEnd\db\import_dc02_postgres.js ===

import fs from 'fs';
import pool from "./db.js";
import dotenv from 'dotenv';
dotenv.config({ path: '../.env' })



// Read JSON data from file
const jsonData = fs.readFileSync('interactive_nodes.json', 'utf8');

// Parse JSON data into JavaScript objects
const data = JSON.parse(jsonData);

// Function to insert data into the PostgreSQL database
async function insertData() {
    const client = await pool.connect();
    try {
        await client.query('BEGIN');

        // Insert data into the database
        for (const entry of data) {
            const machineId = Object.keys(entry)[0]; // Extract machine_id
            const status = JSON.stringify(entry[machineId]); // Convert status to JSON string
            await client.query('INSERT INTO machine_status (machine_id, data) VALUES ($1, $2)', [machineId, status]);
        }

        await client.query('COMMIT');
        console.log('Data inserted successfully');
    } catch (error) {
        await client.query('ROLLBACK');
        console.error('Error inserting data:', error);
    } finally {
        client.release();
        await pool.end();
    }
}

// Call the function to insert data
insertData();


// === BackEnd\db\migrations\createTables.js ===

export const createApprovalTable = `
CREATE TABLE IF NOT EXISTS public.approvals (
    approval_id integer NOT NULL,
    user_id integer,
    admin_user_id integer,
    approval_status character varying(20),
    approval_date timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);
`
export const createDC02Table = `
CREATE TABLE IF NOT EXISTS public.dc02_hardware (
    machine_id character varying(20) NOT NULL,
    status jsonb
);
`
export const createMachineStatusTable = `
CREATE TABLE IF NOT EXISTS public.machine_status (
    machine_id character varying(20) NOT NULL,
    status jsonb
);
`
export const createLoginMethodTable = `
CREATE TABLE IF NOT EXISTS public.login_methods (
    login_id integer NOT NULL,
    user_id integer,
    login_method character varying(20),
    login_identifier character varying(255)
);
`
export const createUsersTable = `
CREATE TABLE IF NOT EXISTS public.users (
    user_id integer NOT NULL,
    username character varying(255),
    email character varying(255),
    phone_number character varying(20),
    password_hash character varying(255),
    status character varying(20) DEFAULT 'pending'::character varying,
    role character varying(20) DEFAULT 'user'::character varying
);
`

export default [createApprovalTable, createDC02Table, createMachineStatusTable, createLoginMethodTable, createUsersTable]

// === BackEnd\db\migrations\index.js ===

import db from '../db.js';
import { createApprovalTable, createDC02Table, createMachineStatusTable, createLoginMethodTable, createUsersTable } from './createTables.js';

const runDbMigrations = async () => {
    console.log('BEGIN DB MIGRATION');
  
    // Use single client for transactions
    const client = await db.connect();
  
    try {
        await client.query('BEGIN'); // Begin transaction
  
        // Execute table creation queries
        await client.query(createApprovalTable);
        await client.query(createDC02Table);
        await client.query(createMachineStatusTable);
        await client.query(createLoginMethodTable);
        await client.query(createUsersTable);
  
        await client.query('COMMIT'); // Commit transaction
        console.log('END DB MIGRATION');
    } catch (e) {
        await client.query('ROLLBACK'); // Rollback transaction
        console.log('DB migration failed:', e.message);
        throw e; // Rethrow the error to handle it elsewhere if needed
    } finally {
        client.release(); // Release the client back to the pool
    }
};

export default runDbMigrations;


// === BackEnd\docker-compose.yml ===

version: '3.8'
services:
  db:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db_dump:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
volumes:
  postgres-data:

# docker-compose --env-file .env up -d
# run in admin powershell. 
# Get-Process | Where-Object { $_.ProcessName -like "postgres*" } | Stop-Process -Force
# pg_restore --dbname=node_watchman_db --username=postgres --no-password < node_watchman_db.dump
# $ProcessUsingPort = Get-NetTCPConnection -LocalPort 5432 | Select-Object -ExpandProperty OwningProcess
# Get-Process -Id $ProcessUsingPort | Select-Object Id, ProcessName
# Stop-Process -Id $ProcessUsingPort -Force


// === BackEnd\router.js ===

import { Router } from "express";
import authenticateToken from "./auth/auth.js";
import fs from "fs/promises"; // Import fs using promise-based API
import bcrypt from "bcrypt";
import dotenv from "dotenv";
dotenv.config({ path: './.env' })
import jwt from "jsonwebtoken";
import pool from "./db/db.js";
import { generateUpdateList } from "./utils/utils.js";

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

const REMOVED_JWT_SECRET = process.env.REMOVED_JWT_SECRET;
const router = Router();

router.post("/update-machine-state", async (req, res) => {
  const updatedStates = req.body; // Directly use req.body as it contains the updated machine states

  // Validate the updatedStates to ensure it's not empty and is an array
  if (!Array.isArray(updatedStates) || updatedStates.length === 0) {
      console.log('Invalid or empty updated states provided');
      return res.status(400).send('Invalid or empty updated states provided');
  }

  try {
      const client = await pool.connect();
      
      // Load the current machine states from your database or a file
      // For this example, let's assume you're loading it from a JSON file as before
      const currentData = await fs.readFile('path/to/your/currentStates.json', 'utf8');
      const currentStates = JSON.parse(currentData);
      
      // Use generateUpdateList to identify what needs to be updated
      const updatesNeeded = await generateUpdateList(currentStates, updatedStates);

      // Iterate over updatesNeeded and update the database
      for (const update of updatesNeeded) {
          const machineId = update.machineId; // Assuming each update includes a machineId
          const newData = update.data; // And the new data

          // Perform your database update logic here
          console.log(`Updating record for machine ID: ${machineId}`);
          await client.query('UPDATE machine_status SET data = $1 WHERE machine_id = $2', [JSON.stringify(newData), machineId]);
      }

      client.release(); // Release the client back to the pool

      // Respond with a success message
      res.json({ status: 'success', message: `${updatesNeeded.length} machines updated successfully.` });
  } catch (error) {
      console.error('Error updating machine state:', error);
      res.status(500).send('Error processing request');
  }
});


router.get('/load-machine-state', async (req, res) => {
  try {
      const client = await pool.connect();
      const queryResult = await client.query('SELECT * FROM machine_status');
      const jsonData = queryResult.rows;
      client.release(); // Release the client back to the pool

      res.json(jsonData);
  } catch (err) {
      console.error('Error:', err);
      res.status(500).send('Error loading machine status');
  }
});


router.get('/dc02-hardware-info', async (req, res) => {
  try {
      const client = await pool.connect();
      const queryResult = await client.query('SELECT * FROM dc02_hardware');
      const jsonData = queryResult.rows;
      client.release(); // Release the client back to the pool

      res.json(jsonData);
  } catch (err) {
      console.error('Error:', err);
      res.status(500).send('Error loading machine status');
  }
});

// Registration endpoint
router.post("/register", async (req, res) => {
  const result = "NOT IMPLEMENTED";
  res.status(201).json(result);
});

// Approval endpoint
router.get("/approve/:id", async (req, res) => {
  const result = "NOT IMPLEMENTED";
  res.status(201).json(result);
});

// Login route
router.post("/login", async (req, res) => {
  const { loginIdentifier, password } = req.body;

  try {
    // Query the login_methods table to find the user_id associated with the login identifier
    const loginMethodResult = await pool.query(
      "SELECT user_id FROM login_methods WHERE login_identifier = $1",
      [loginIdentifier]
    );
    const loginMethod = loginMethodResult.rows[0];

    // Check if login identifier exists
    if (!loginMethod) {
      return res.status(404).json({ error: "User not found" });
    }

    // Query the users table to retrieve user information
    const userResult = await pool.query(
      "SELECT * FROM users WHERE user_id = $1",
      [loginMethod.user_id]
    );
    const user = userResult.rows[0];

    // DEBUGGING LINE //////////////////////////////////////
    // console.log(user)
    // console.log(password)
    ////////////////////////////////////////////////////////
    
    // Check password
    const isPasswordValid = await bcrypt.compare(password, user.password_hash);
    if (!isPasswordValid) {
      return res.status(401).json({ error: "Invalid password" });
    }

    // Sign a token. Include a flag in the token payload to indicate if the user is an admin
    const token = jwt.sign(
      { userId: user.user_id, isAdmin: user.is_admin || false },
      REMOVED_JWT_SECRET,
      { expiresIn: "9999 years" }
    );

    // Respond with JWT token and user information
    res.status(200).json({ token, user });
  } catch (error) {
    console.error("Error logging in:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});

router.post("/admin/revoke", async (req, res) => {
  const result = "NOT IMPLEMENTED";
  res.status(201).json(result);
});

// API endpoint to handle logout
router.post("/logout", (req, res) => {
  const token = req.headers["authorization"].split(" ")[1];
  blacklistToken(token);
  res.send("Logged out successfully");
});




export default router;


// === BackEnd\server.js ===

// CHECK IF COMPUTER OS IS COMPATIBLE
//////////////////////////////////////////////////
import checkOS from '../Utils/chk_os.js';

checkOS();
//////////////////////////////////////////////////
console.log("Current Working Directory:", process.cwd());

import 'dotenv/config';
import app from './app.js';
import runDbMigrations from './db/migrations/index.js';
import config from '../Config/config.js';
async function start() {
    await runDbMigrations();
    app.listen(config.BACKEND_SERVER_PORT, '0.0.0.0', () => console.log(`Server started on port ${config.BACKEND_SERVER_PORT}`));
}

start();

// === BackEnd\utils\utils.js ===

import { isEqual } from 'lodash-es';

/**
 * Compares two arrays of machine states (current and updated) and generates a list of updates needed.
 * 
 * This function assumes that each element in the input arrays represents the state of a machine at the same index,
 * allowing for direct comparison using the array index. It checks for differences between the current and updated 
 * states of each machine and returns a list of the updated machine states that differ from their current states.
 *
 * @param {string} currentData - A JSON string representing an array of the current states of machines.
 * @param {string} updatedData - A JSON string representing an array of the updated states of machines.
 * @returns {Array} updatesNeeded - An array of updated machine states that differ from the current states.
 *
 * Note: It's crucial for both `currentStates` and `updatedStates` to be arrays of the same length,
 * with corresponding indices representing the same machine.
 */
async function generateUpdateList(currentData, updatedData) {
    const currentStates = JSON.parse(currentData);
    const updatedStates = JSON.parse(updatedData);
    const updatesNeeded = [];

    // Ensure both arrays are of the same length to avoid errors
    if (currentStates.length !== updatedStates.length) {
        console.error("The current and updated states arrays do not match in length.");
        return updatesNeeded;
    }

    // Iterate over the arrays using index
    for (let i = 0; i < currentStates.length; i++) {
        const currentMachineState = currentStates[i];
        const updatedMachineState = updatedStates[i];

        // If data has changed
        if (!isEqual(currentMachineState, updatedMachineState)) {
            // Assuming the structure includes a machineId field or similar to identify the machine
            updatesNeeded.push(updatedMachineState);
        }
    }

    return updatesNeeded;
}

export default { generateUpdateList }

// === BashScripts\createTestContainers.sh ===

#!/bin/bash

# Function to create a rack of 20 Docker containers with specified IP addresses
create_rack() {
    local rackNumber=$1
    echo "Creating rack with rack number: $rackNumber"
    for ((i=1; i<=20; i++)); do
    (    local ip="10.10.$rackNumber.$i"
        echo "Creating container with IP: $ip"
        docker run -d --rm --name "machine${rackNumber}_$i" \
            --network test-network-10.10/16 --ip $ip my_ssh_server
    ) &
    done
    echo "Rack $rackNumber creation completed."
}

# Function to loop through rack numbers and create racks
create_racks_from_list() {
    local rackNumbers='
    11
    12
    13
    14
    21
    22
    23
    24
    25
    111
    112
    113
    121
    122
    123
    124
    125
    '

    for rackNumber in $rackNumbers; do
        if [[ ! -z "$rackNumber" ]]; then # Check if the rack number is not empty
            (
                create_rack $rackNumber
            ) &
        fi
    done
}

# Function to dispose of all containers created by the create_rack function
dispose_racks() {
    echo "Disposing of all rack containers..."
    local pids=()

    local containers=$(docker ps -a --filter "name=machine" --format "{{.Names}}")
    for container in $containers; do
        echo "Stopping and removing container: $container"
        docker stop $container && docker rm $container &
        pids+=($!)
    done

    # Wait for all background processes to complete
    for pid in "${pids[@]}"; do
        wait $pid
    done

    echo "All rack containers have been disposed of."
}

# Call the function to create racks from the list
# create_racks_from_list
# Uncomment the line below to test the dispose_racks function
dispose_racks



# get all ips
# docker ps --format '{{.ID}}\t{{.Names}}' | while read -r container_id container_name; do
#     ip=$(docker inspect --format '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' "$container_id")
#     echo -e "$container_id\t$container_name\t$ip"
# done


// === BashScripts\execute_on_machines.sh ===

#!/bin/bash

# Declare an array to store JSON data
temp_file=$(mktemp)

# Check if at least two arguments are provided
if [ "$#" -lt 2 ]; then
    echo "Usage: $0 'machine1_ip,machine2_ip,...' 'command to execute'" | tee -a debug.txt
    exit 1
fi

# Split the first argument into an array of IPs
IFS=',' read -r -a machine_ips <<< "$1"

# The command to execute on each machine
command="$2"

# Loop through the array of IPs and execute the command on each machine in parallel
for ip in "${machine_ips[@]}"; do
    (
        # Capture the output of each SSH command and write it to a temporary file
        if output=$(ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@"$ip" "$command" 2>/dev/null); then
            jq -nR \
                --arg _ip "$ip" \
                --arg _cmd "$command" \
                --arg _out "$output" \
                '{"ip": $_ip, "result": {"cmd": $_cmd, "output": $_out}}'
        else
            # If SSH connection fails, write an error message to the temporary file
            jq -nR \
                --arg _ip "$ip" \
                --arg _err "SSH connection failed" \
                --arg _err_info "$output" \
                '{"ip": $_ip, "error": $_err, "error_info": $_err_info}' \
                >> "$temp_file"
        fi
    ) &
done

wait

# Combine individual JSON objects into a JSON array
jq -s '.' < "$temp_file"

rm "$temp_file" # Clean up the temporary file



// === BashScripts\test_script.sh ===

#!/bin/bash

test_ips="10.10.11.1,10.10.11.2,10.10.11.3,10.10.11.4,10.10.11.5,10.10.11.6,10.10.11.7,10.10.11.8,10.10.11.9,10.10.11.10,10.10.11.11,10.10.11.12,10.10.11.13,10.10.11.14,10.10.11.15,10.10.11.16,10.10.11.17,10.10.11.18,10.10.11.19,10.10.11.20,10.10.12.1,10.10.12.2,10.10.12.3,10.10.12.4,10.10.12.5,10.10.12.6,10.10.12.7,10.10.12.8,10.10.12.9,10.10.12.10,10.10.12.11,10.10.12.12,10.10.12.13,10.10.12.14,10.10.12.15,10.10.12.16,10.10.12.17,10.10.12.18,10.10.12.19,10.10.12.20,10.10.13.1,10.10.13.2,10.10.13.3,10.10.13.4,10.10.13.5,10.10.13.6,10.10.13.7,10.10.13.8,10.10.13.9,10.10.13.10,10.10.13.11,10.10.13.12,10.10.13.13,10.10.13.14,10.10.13.15,10.10.13.16,10.10.13.17,10.10.13.18,10.10.13.19,10.10.13.20,10.10.14.1,10.10.14.2,10.10.14.3,10.10.14.4,10.10.14.5,10.10.14.6,10.10.14.7,10.10.14.8,10.10.14.9,10.10.14.10,10.10.14.11,10.10.14.12,10.10.14.13,10.10.14.14,10.10.14.15,10.10.14.16,10.10.14.17,10.10.14.18,10.10.14.19,10.10.14.20,10.10.21.1,10.10.21.2,10.10.21.3,10.10.21.4,10.10.21.5,10.10.21.6,10.10.21.7,10.10.21.8,10.10.21.9,10.10.21.10,10.10.21.11,10.10.21.12,10.10.21.13,10.10.21.14,10.10.21.15,10.10.21.16,10.10.21.17,10.10.21.18,10.10.21.19,10.10.21.20,10.10.22.1,10.10.22.2,10.10.22.3,10.10.22.4,10.10.22.5,10.10.22.6,10.10.22.7,10.10.22.8,10.10.22.9,10.10.22.10,10.10.22.11,10.10.22.12,10.10.22.13,10.10.22.14,10.10.22.15,10.10.22.16,10.10.22.17,10.10.22.18,10.10.22.19,10.10.22.20,10.10.23.1,10.10.23.2,10.10.23.3,10.10.23.4,10.10.23.5,10.10.23.6,10.10.23.7,10.10.23.8,10.10.23.9,10.10.23.10,10.10.23.11,10.10.23.12,10.10.23.13,10.10.23.14,10.10.23.15,10.10.23.16,10.10.23.17,10.10.23.18,10.10.23.19,10.10.23.20,10.10.24.1,10.10.24.2,10.10.24.3,10.10.24.4,10.10.24.5,10.10.24.6,10.10.24.7,10.10.24.8,10.10.24.9,10.10.24.10,10.10.24.11,10.10.24.12,10.10.24.13,10.10.24.14,10.10.24.15,10.10.24.16,10.10.24.17,10.10.24.18,10.10.24.19,10.10.24.20,10.10.25.1,10.10.25.2,10.10.25.3,10.10.25.4,10.10.25.5,10.10.25.6,10.10.25.7,10.10.25.8,10.10.25.9,10.10.25.10,10.10.25.11,10.10.25.12,10.10.25.13,10.10.25.14,10.10.25.15,10.10.25.16,10.10.25.17,10.10.25.18,10.10.25.19,10.10.25.20,10.10.111.1,10.10.111.2,10.10.111.3,10.10.111.4,10.10.111.5,10.10.111.6,10.10.111.7,10.10.111.8,10.10.111.9,10.10.111.10,10.10.111.11,10.10.111.12,10.10.111.13,10.10.111.14,10.10.111.15,10.10.111.16,10.10.111.17,10.10.111.18,10.10.111.19,10.10.111.20,10.10.112.1,10.10.112.2,10.10.112.3,10.10.112.4,10.10.112.5,10.10.112.6,10.10.112.7,10.10.112.8,10.10.112.9,10.10.112.10,10.10.112.11,10.10.112.12,10.10.112.13,10.10.112.14,10.10.112.15,10.10.112.16,10.10.112.17,10.10.112.18,10.10.112.19,10.10.112.20,10.10.113.1,10.10.113.2,10.10.113.3,10.10.113.4,10.10.113.5,10.10.113.6,10.10.113.7,10.10.113.8,10.10.113.9,10.10.113.10,10.10.113.11,10.10.113.12,10.10.113.13,10.10.113.14,10.10.113.15,10.10.113.16,10.10.113.17,10.10.113.18,10.10.113.19,10.10.113.20,10.10.121.1,10.10.121.2,10.10.121.3,10.10.121.4,10.10.121.5,10.10.121.6,10.10.121.7,10.10.121.8,10.10.121.9,10.10.121.10,10.10.121.11,10.10.121.12,10.10.121.13,10.10.121.14,10.10.121.15,10.10.121.16,10.10.121.17,10.10.121.18,10.10.121.19,10.10.121.20,10.10.122.1,10.10.122.2,10.10.122.3,10.10.122.4,10.10.122.5,10.10.122.6,10.10.122.7,10.10.122.8,10.10.122.9,10.10.122.10,10.10.122.11,10.10.122.12,10.10.122.13,10.10.122.14,10.10.122.15,10.10.122.16,10.10.122.17,10.10.122.18,10.10.122.19,10.10.122.20,10.10.123.1,10.10.123.2,10.10.123.3,10.10.123.4,10.10.123.5,10.10.123.6,10.10.123.7,10.10.123.8,10.10.123.9,10.10.123.10,10.10.123.11,10.10.123.12,10.10.123.13,10.10.123.14,10.10.123.15,10.10.123.16,10.10.123.17,10.10.123.18,10.10.123.19,10.10.123.20,10.10.124.1,10.10.124.2,10.10.124.3,10.10.124.4,10.10.124.5,10.10.124.6,10.10.124.7,10.10.124.8,10.10.124.9,10.10.124.10,10.10.124.11,10.10.124.12,10.10.124.13,10.10.124.14,10.10.124.15,10.10.124.16,10.10.124.17,10.10.124.18,10.10.124.19,10.10.124.20,10.10.125.1,10.10.125.2,10.10.125.3,10.10.125.4,10.10.125.5,10.10.125.6,10.10.125.7,10.10.125.8,10.10.125.9,10.10.125.10,10.10.125.11,10.10.125.12,10.10.125.13,10.10.125.14,10.10.125.15,10.10.125.16,10.10.125.17,10.10.125.18,10.10.125.19,10.10.125.20"


# Correctly escaped command
command="ip addr | awk '\$1 ~ /^[0-9]+:/ { if (iface != \"\" && mac != \"\") print iface\": \"mac; iface = \$2; sub(/:$/, \"\", iface); mac = \"\" } \$1 == \"link/ether\" { mac = \$2 } END { if (iface != \"\" && mac != \"\") print iface\": \"mac }'"

# Pass the command to execute_on_machines.sh
./execute_on_machines.sh "$test_ips" "$command"


// === Config\config.js ===

// config.js
const config = {
    BACKEND_SERVER_IP: 'localhost',
    BACKEND_SERVER_PORT: '3000',

    FRONTEND_SERVER_IP: 'localhost',
    FRONTEND_SERVER_PORT: '5500',

    SSH_SERVER_IP: 'localhost',
    SSH_SERVER_PORT: '5000'
  };
  
  export default config;  
  


// === FrontEnd\public\LandingPage\js\scripts.js ===

$(function () {

    // init feather icons
    feather.replace();

    // init tooltip & popovers
    $('[data-toggle="tooltip"]').tooltip();
    $('[data-toggle="popover"]').popover();

    //page scroll
    $('a.page-scroll').bind('click', function (event) {
        var $anchor = $(this);
        $('html, body').stop().animate({
            scrollTop: $($anchor.attr('href')).offset().top - 20
        }, 1000);
        event.preventDefault();
    });

    // slick slider
    $('.slick-about').slick({
        slidesToShow: 1,
        slidesToScroll: 1,
        autoplay: true,
        autoplaySpeed: 3000,
        dots: true,
        arrows: false
    });

    //toggle scroll menu
    var scrollTop = 0;
    $(window).scroll(function () {
        var scroll = $(window).scrollTop();
        //adjust menu background
        if (scroll > 80) {
            if (scroll > scrollTop) {
                $('.smart-scroll').addClass('scrolling').removeClass('up');
            } else {
                $('.smart-scroll').addClass('up');
            }
        } else {
            // remove if scroll = scrollTop
            $('.smart-scroll').removeClass('scrolling').removeClass('up');
        }

        scrollTop = scroll;

        // adjust scroll to top
        if (scroll >= 600) {
            $('.scroll-top').addClass('active');
        } else {
            $('.scroll-top').removeClass('active');
        }
        return false;
    });

    // scroll top top
    $('.scroll-top').click(function () {
        $('html, body').stop().animate({
            scrollTop: 0
        }, 1000);
    });

    /**Theme switcher - DEMO PURPOSE ONLY */
    $('.switcher-trigger').click(function () {
        $('.switcher-wrap').toggleClass('active');
    });
    $('.color-switcher ul li').click(function () {
        var color = $(this).attr('data-color');
        $('#theme-color').attr("href", "css/" + color + ".css");
        $('.color-switcher ul li').removeClass('active');
        $(this).addClass('active');
    });
});

// === FrontEnd\public\LandingPage\LandingPage.html ===

<!doctype html>
<html lang="en">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Knight - Free Bootstrap 4 Product Landing Page Template</title>
    <meta name="description"
          content="Knight is a beautiful Bootstrap 4 template for product landing pages."/>

    <!--Inter UI font-->
    <link href="https://rsms.me/inter/inter-ui.css" rel="stylesheet">

    <!--vendors styles-->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick-theme.min.css">

    <!-- Bootstrap CSS / Color Scheme -->
    <link rel="stylesheet" href="css/default.css" id="theme-color">
</head>
<body>

<!--navigation-->
<section class="smart-scroll">
    <div class="container-fluid">
        <nav class="navbar navbar-expand-md navbar-dark">
            <a class="navbar-brand heading-black" href="index.html">
                Knight
            </a>
            <button class="navbar-toggler navbar-toggler-right border-0" type="button" data-toggle="collapse"
                    data-target="#navbarCollapse" aria-controls="navbarCollapse" aria-expanded="false"
                    aria-label="Toggle navigation">
                <span data-feather="grid"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarCollapse">
                <ul class="navbar-nav ml-auto">
                    <li class="nav-item">
                        <a class="nav-link page-scroll" href="../MachineControlPanelPage/machine-control-panel.html">Interactive Nodes</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link page-scroll" href="#features">Features</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link page-scroll" href="#pricing">Pricing</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link page-scroll" href="#faq">FAQ</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link page-scroll" href="#blog">Blog</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link page-scroll d-flex flex-row align-items-center text-primary" href="#">
                            <em data-feather="layout" width="18" height="18" class="mr-2"></em>
                            Try Generator
                        </a>
                    </li>
                </ul>
            </div>
        </nav>
    </div>
</section>

<!--hero header-->
<section class="py-7 py-md-0 bg-hero" id="home">
    <div class="container">
        <div class="row vh-md-100">
            <div class="col-md-8 col-sm-10 col-12 mx-auto my-auto text-center">
                <h1 class="heading-black text-capitalize">Quickly build landing pages with Knight</h1>
                <p class="lead py-3">Knight is a platform that helps freelancers and companies build beautiful landing
                    pages in minutes. Sign up for free.</p>
                <button class="btn btn-primary d-inline-flex flex-row align-items-center">
                    Get started now
                    <em class="ml-2" data-feather="arrow-right"></em>
                </button>
            </div>
        </div>
    </div>
</section>

<!-- features section -->
<section class="pt-6 pb-7" id="features">
    <div class="container">
        <div class="row">
            <div class="col-md-6 mx-auto text-center">
                <h2 class="heading-black">Knight offers everything you need.</h2>
                <p class="text-muted lead">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum in nisi
                    commodo, tempus odio a, vestibulum nibh.</p>
            </div>
        </div>
        <div class="row mt-5">
            <div class="col-md-10 mx-auto">
                <div class="row feature-boxes">
                    <div class="col-md-6 box">
                        <div class="icon-box box-primary">
                            <div class="icon-box-inner">
                                <span data-feather="edit-3" width="35" height="35"></span>
                            </div>
                        </div>
                        <h5>Create once. Share everywhere.</h5>
                        <p class="text-muted">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum in
                            nisi commodo, tempus odio a, vestibulum nibh.</p>
                    </div>
                    <div class="col-md-6 box">
                        <div class="icon-box box-success">
                            <div class="icon-box-inner">
                                <span data-feather="monitor" width="35" height="35"></span>
                            </div>
                        </div>
                        <h5>Unlimited devices</h5>
                        <p class="text-muted">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum in
                            nisi commodo, tempus odio a, vestibulum nibh.</p>
                    </div>
                    <div class="col-md-6 box">
                        <div class="icon-box box-danger">
                            <div class="icon-box-inner">
                                <span data-feather="layout" width="35" height="35"></span>
                            </div>
                        </div>
                        <h5>Beautiful tempates & layouts</h5>
                        <p class="text-muted">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum in
                            nisi commodo, tempus odio a, vestibulum nibh.</p>
                    </div>
                    <div class="col-md-6 box">
                        <div class="icon-box box-info">
                            <div class="icon-box-inner">
                                <span data-feather="globe" width="35" height="35"></span>
                            </div>
                        </div>
                        <h5>Available globally</h5>
                        <p class="text-muted">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum in
                            nisi commodo, tempus odio a, vestibulum nibh.</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mt-6">
            <div class="col-md-6 mr-auto">
                <h2>Knight is more than just a page builder.</h2>
                <p class="mb-5">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla convallis pulvinar vestibulum. Donec eleifend, sem sed dictum mattis, turpis purus placerat eros.</p>
                <a href="#" class="btn btn-light">
                    Try the live demo
                </a>
            </div>
            <div class="col-md-5">
                <div class="slick-about">
                    <img src="img/blog-1.jpg" class="img-fluid rounded d-block mx-auto" alt="Work 1"/>
                    <img src="img/blog-2.jpg" class="img-fluid rounded d-block mx-auto" alt="Work 2"/>
                    <img src="img/blog-3.jpg" class="img-fluid rounded d-block mx-auto" alt="Work 3"/>
                </div>
            </div>
        </div>
    </div>
</section>

<!--pricing section-->
<section class="py-7 bg-dark section-angle top-right bottom-right" id="pricing">
    <div class="container">
        <div class="row">
            <div class="col-md-6 mx-auto text-center">
                <h2 class="text-white heading-black">Choose your pricing plan.</h2>
                <p class="text-light lead">Simply pricing - 7 Days free trial</p>
            </div>
        </div>
        <!--pricing tables-->
        <div class="row pt-5 pricing-table">
            <div class="col-12 mx-auto">
                <div class="card-deck pricing-table">
                    <div class="card">
                        <div class="card-body">
                            <h3 class="card-title pt-3">Personal</h3>
                            <h2 class="card-title text-primary mb-0 pt-4">$59</h2>
                            <div class="text-muted font-weight-medium mt-2">per month</div>
                            <ul class="list-unstyled pricing-list">
                                <li>1 user</li>
                                <li>10 websites</li>
                                <li>Access to premium templates</li>
                                <li>Basic support</li>
                            </ul>
                            <a href="#" class="btn btn-primary">
                                Start free trial
                            </a>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <h3 class="card-title pt-3">Agency</h3>
                            <h2 class="card-title text-info mb-0 pt-4">$159</h2>
                            <div class="text-muted font-weight-medium mt-2">per month</div>
                            <ul class="list-unstyled pricing-list">
                                <li>2-15 users</li>
                                <li>50 websites</li>
                                <li>Access to premium templates</li>
                                <li>Priority support</li>
                            </ul>
                            <a href="#" class="btn btn-info">
                                Start free trial
                            </a>
                        </div>
                    </div>
                    <div class="card">
                        <div class="card-body">
                            <h3 class="card-title pt-3">Enterprise</h3>
                            <h2 class="card-title text-primary mb-0 pt-4">$499</h2>
                            <div class="text-muted font-weight-medium mt-2">per month</div>
                            <ul class="list-unstyled pricing-list">
                                <li>Unlimited users</li>
                                <li>Unlimited websites</li>
                                <li>Access to premium templates</li>
                                <li>24/7 support</li>
                            </ul>
                            <a href="#" class="btn btn-primary">
                                Start free trial
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mt-6">
            <div class="col-md-4 mr-auto">
                <h3>Everything is covered.</h3>
                <p class="lead">
                    Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum in nisi commodo, tempus odio a,
                    vestibulum nibh.
                </p>
            </div>
            <div class="col-md-7 offset-md-1">
                <ul class="features-list">
                    <li>Weekly new templates</li>
                    <li>Access to new features</li>
                    <li>MailChimp integration</li>
                    <li>Stripe integration</li>
                    <li>100 refund guarantee</li>
                    <li>Advance SEO tools</li>
                    <li>Free unlimited support</li>
                </ul>
            </div>
        </div>
        <div class="row mt-5">
            <div class="col-md-8 col-12 divider top-divider mx-auto pt-5 text-center">
                <h3>Try Knight free for 7 days</h3>
                <p class="mb-4">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum in nisi commodo,
                    tempus odio a, vestibulum nibh.</p>
                <button class="btn btn-primary">
                    Create your account
                </button>
            </div>
        </div>
    </div>
</section>

<!--faq section-->
<section class="py-7" id="faq">
    <div class="container">
        <div class="row">
            <div class="col-md-6 mx-auto text-center">
                <h2>Frequently asked questions</h2>
                <p class="text-muted lead">Answers to most common questions.</p>
            </div>
        </div>
        <div class="row mt-5">
            <div class="col-md-10 mx-auto">
                <div class="row">
                    <div class="col-md-6 mb-5">
                        <h6>Can I try it for free?</h6>
                        <p class="text-muted">Nam liber tempor cum soluta nobis eleifend option congue nihil imper per tem por legere me doming.</p>
                    </div>
                    <div class="col-md-6 mb-5">
                        <h6>Do you have hidden fees?</h6>
                        <p class="text-muted">Nam liber tempor cum soluta nobis eleifend option congue nihil imper per tem por legere me doming.</p>
                    </div>
                    <div class="col-md-6 mb-5">
                        <h6>What are the payment methods you accept?</h6>
                        <p class="text-muted">Nam liber tempor cum soluta nobis eleifend option congue nihil imper per tem por legere me doming.</p>
                    </div>
                    <div class="col-md-6 mb-5">
                        <h6>How often do you release updates?</h6>
                        <p class="text-muted">Nam liber tempor cum soluta nobis eleifend option congue nihil imper per tem por legere me doming.</p>
                    </div>
                    <div class="col-md-6 mb-5">
                        <h6>What is your refund policy?</h6>
                        <p class="text-muted">Nam liber tempor cum soluta nobis eleifend option congue nihil imper per tem por legere me doming.</p>
                    </div>
                    <div class="col-md-6 mb-5">
                        <h6>How can I contact you?</h6>
                        <p class="text-muted">Nam liber tempor cum soluta nobis eleifend option congue nihil imper per tem por legere me doming.</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mt-4">
            <div class="col-md-6 mx-auto text-center">
                <h5 class="mb-4">Have questions?</h5>
                <a href="#" class="btn btn-primary">Contact us</a>
            </div>
        </div>
    </div>
</section>

<!--news section-->
<section class="py-7 bg-dark section-angle top-left bottom-left" id="blog">
    <div class="container">
        <div class="row">
            <div class="col-md-6 mx-auto text-center">
                <h2 class="heading-black">News from Knight.</h2>
                <p class="text-muted lead">What's new at Knight.</p>
            </div>
        </div>
        <div class="row mt-5">
            <div class="col-md-4">
                <div class="card">
                    <a href="#">
                        <img class="card-img-top img-raised" src="img/blog-1.jpg" alt="Blog 1">
                    </a>
                    <div class="card-body">
                        <a href="#" class="card-title mb-2"><h5>We launch new iOS & Android mobile apps</h5></a>
                        <p class="text-muted small-xl mb-2">Sep 27, 2018</p>
                        <p class="card-text">Nam liber tempor cum soluta nobis eleifend option congue nihil imper,
                            consectetur adipiscing elit. <a href="#">Learn more</a></p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <a href="#">
                        <img class="card-img-top img-raised" src="img/blog-2.jpg" alt="Blog 2">
                    </a>
                    <div class="card-body">
                        <a href="#" class="card-title mb-2"><h5>New update is available for the editor</h5></a>
                        <p class="text-muted small-xl mb-2">August 16, 2018</p>
                        <p class="card-text">Nam liber tempor cum soluta nobis eleifend option congue nihil imper,
                            consectetur adipiscing elit. <a href="#">Learn more</a></p>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="card">
                    <a href="#">
                        <img class="card-img-top img-raised" src="img/blog-3.jpg" alt="Blog 3">
                    </a>
                    <div class="card-body">
                        <a href="#" class="card-title mb-2"><h5>The story of building #1 page builder</h5></a>
                        <p class="text-muted small-xl mb-2">December 2nd, 2017</p>
                        <p class="card-text">Nam liber tempor cum soluta nobis eleifend option congue nihil imper,
                            consectetur adipiscing elit. <a href="#">Learn more</a></p>
                    </div>
                </div>
            </div>
        </div>
        <div class="row mt-6">
            <div class="col-md-6 mx-auto text-center">
                <a href="#" class="btn btn-primary">View all posts</a>
            </div>
        </div>
    </div>
</section>

<!--footer-->
<footer class="py-6">
    <div class="container">
        <div class="row">
            <div class="col-sm-5 mr-auto">
                <h5>About Knight</h5>
                <p class="text-muted">Magnis modipsae que voloratati andigen daepeditem quiate conecus aut labore.
                    Laceaque quiae sitiorem rest non restibusaes maio es dem tumquam explabo.</p>
                <ul class="list-inline social social-sm">
                    <li class="list-inline-item">
                        <a href=""><i class="fa fa-facebook"></i></a>
                    </li>
                    <li class="list-inline-item">
                        <a href=""><i class="fa fa-twitter"></i></a>
                    </li>
                    <li class="list-inline-item">
                        <a href=""><i class="fa fa-google-plus"></i></a>
                    </li>
                    <li class="list-inline-item">
                        <a href=""><i class="fa fa-dribbble"></i></a>
                    </li>
                </ul>
            </div>
            <div class="col-sm-2">
                <h5>Legal</h5>
                <ul class="list-unstyled">
                    <li><a href="#">Privacy</a></li>
                    <li><a href="#">Terms</a></li>
                    <li><a href="#">Refund policy</a></li>
                </ul>
            </div>
            <div class="col-sm-2">
                <h5>Partner</h5>
                <ul class="list-unstyled">
                    <li><a href="#">Refer a friend</a></li>
                    <li><a href="#">Affiliates</a></li>
                </ul>
            </div>
            <div class="col-sm-2">
                <h5>Help</h5>
                <ul class="list-unstyled">
                    <li><a href="#">Support</a></li>
                    <li><a href="#">Log in</a></li>
                </ul>
            </div>
        </div>
        <div class="row mt-5">
            <div class="col-12 text-muted text-center small-xl">
                &copy; 2019 Knight - All Rights Reserved
            </div>
        </div>
    </div>
</footer>

<!--scroll to top-->
<div class="scroll-top">
    <i class="fa fa-angle-up" aria-hidden="true"></i>
</div>

<!-- theme switcher (FOR DEMO ONLY - REMOVE FROM PRODUCTION)-->
<div class="switcher-wrap">
    <div class="switcher-trigger">
        <span class="fa fa-gear"></span>
    </div>
    <div class="color-switcher">
        <h6>Color Switcher</h6>
        <ul class="mt-3 clearfix">
            <li class="bg-teal active" data-color="default" title="Default Teal"></li>
            <li class="bg-purple" data-color="purple" title="Purple"></li>
            <li class="bg-blue" data-color="blue" title="Blue"></li>
            <li class="bg-red" data-color="red" title="Red"></li>
            <li class="bg-green" data-color="green" title="Green"></li>
            <li class="bg-indigo" data-color="indigo" title="Indigo"></li>
            <li class="bg-orange" data-color="orange" title="Orange"></li>
            <li class="bg-cyan" data-color="cyan" title="Cyan"></li>
            <li class="bg-yellow" data-color="yellow" title="Yellow"></li>
            <li class="bg-pink" data-color="pink" title="Pink"></li>
        </ul>
        <p>These are just demo colors. You can <b>easily</b> create your own color scheme.</p>
    </div>
</div>

<!-- jQuery first, then Popper.js, then Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/feather-icons/4.7.3/feather.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.8.1/slick.min.js"></script>
<script src="js/scripts.js"></script>
</body>
</html>

// === FrontEnd\public\LoginPage\login.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Design by foolishdeveloper.com -->
    <title>Glassmorphism login Form Tutorial in html css</title>

    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
    <!--Stylesheet-->
</head>
<body>
<div class="background">
    <div class="shape"></div>
    <div class="shape"></div>
</div>
<form id="loginForm">
    <h3>Login Here</h3>

    <label for="username">Username</label>
    <input type="text" placeholder="Email or Phone" id="username" name="username">

    <label for="password">Password</label>
    <input type="password" placeholder="Password" id="password" name="password">

    <button type="submit">Log In</button>
    <button type="button" id="registerBtn">Register</button>
    <div class="social">
        <div class="go"><i class="fab fa-google"></i>  Google</div>
        <div class="fb"><i class="fab fa-facebook"></i>  Facebook</div>
    </div>
    <script src="../scripts/config.js"></script>
    <script src="./login.js"></script>
</form>
</body>
</html>


// === FrontEnd\public\LoginPage\login.js ===

// login.js
document.getElementById('loginForm').addEventListener('submit', async (event) => {
    event.preventDefault();
    
    // Get form data
    const formData = new FormData(event.target);
    const email = formData.get('username');
    const password = formData.get('password');
    
    // Check if both fields are filled out
    if (!email || !password) {
        alert('Please fill out both email and password fields.');
        return; // Stop further execution
    }
    
    // Proceed with login
    const bodyData = { email, password };
    console.log(bodyData);
    try {
        const response = await fetch(`http://${config.BACKEND_SERVER_IP}/login`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(bodyData)
        });
        
        if (response.ok) {
            const data = await response.json();
            localStorage.setItem('token', data.token); // Save token
            window.location.href = '../../interact.html'; // Redirect to GUI
        } else {
            alert('Login failed');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('An error occurred. Please try again later.');
    }
});


document.getElementById('registerBtn').addEventListener('click', function() {
    window.location.href = '../RegisterPage/register.html';
});


// === FrontEnd\public\LoginPage\styles.css ===

/* Login Screen CSS */
        *,
        *:before,
        *:after{
            padding: 0;
            margin: 0;
            box-sizing: border-box;
        }
	body{
            background-color: #080710;
        }
        .background{
            width: 430px;
            height: 520px;
            position: absolute;
            transform: translate(-50%,-50%);
            left: 50%;
            top: 50%;
        }
        .background .shape{
            height: 200px;
            width: 200px;
            position: absolute;
            border-radius: 50%;
        }
        .shape:first-child{
            background: linear-gradient(
                #1845ad,
                #23a2f6
            );
            left: -80px;
            top: -80px;
        }
        .shape:last-child{
            background: linear-gradient(
                to right,
                #ff512f,
                #f09819
            );
            right: -30px;
            bottom: -80px;
        }
        form{
            width: 400px;
            background-color: rgba(255,255,255,0.13);
            position: absolute;
            transform: translate(-50%,-50%);
            top: 50%;
            left: 50%;
            border-radius: 10px;
            backdrop-filter: blur(10px);
            border: 2px solid rgba(255,255,255,0.1);
            box-shadow: 0 0 40px rgba(8,7,16,0.6);
            padding: 50px 35px;
        }
        form *{
            font-family: 'Poppins',sans-serif;
            color: #ffffff;
            letter-spacing: 0.5px;
            outline: none;
            border: none;
        }
        form h3{
            font-size: 32px;
            font-weight: 500;
            line-height: 42px;
            text-align: center;
        }
        
        label{
            display: block;
            margin-top: 30px;
            font-size: 16px;
            font-weight: 500;
        }

        
        input{
            display: block;
            height: 50px;
            width: 100%;
            background-color: rgba(255,255,255,0.07);
            border-radius: 3px;
            padding: 0 10px;
            margin-top: 8px;
            font-size: 14px;
            font-weight: 300;
        }
        ::placeholder{
            color: #e5e5e5;
        }
        button{
            margin-top: 50px;
            width: 100%;
            background-color: #ffffff;
            color: #080710;
            padding: 15px 0;
            font-size: 18px;
            font-weight: 600;
            border-radius: 5px;
            cursor: pointer;
        }
        .social{
          margin-top: 30px;
          display: flex;
        }
        .social div{
          background: red;
          width: 150px;
          border-radius: 3px;
          padding: 5px 10px 10px 5px;
          background-color: rgba(255,255,255,0.27);
          color: #eaf0fb;
          text-align: center;
        }
        .social div:hover{
          background-color: rgba(255,255,255,0.47);
        }
        .social .fb{
          margin-left: 25px;
        }
        .social i{
          margin-right: 4px;
        }




// === FrontEnd\public\MachineControlPanelPage\api.js ===

_config = dev

// uncomment to use production env variables
//  _config = prod

async function executeScript(ipsString, bashCode) {
    const executeScriptUrl = `http://${_config.SSH_SERVER}/execute-script`;
    try {
      const response = await fetch(executeScriptUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ ips: ipsString, script: bashCode }),
      });
      const data = await response.json();
      return data; // Return the JSON response
    } catch (error) {
      console.error("Error in executing script:", error);
      throw error; // Rethrow the error to handle it in the calling context
    }
  }
  
  async function updateMachineState(mappedArrayFormatted) {
    const updateStateUrl = `http://${_config.BACKEND_SERVER}/update-machine-state`;
    try {
      const response = await fetch(updateStateUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(mappedArrayFormatted),
      });
      const data = await response.json();
      return data; // Return the JSON response
    } catch (error) {
      console.error("Error in updating machine state:", error);
      throw error; // Rethrow the error to handle it in the calling context
    }
  }

  async function fetchHardwareInfo() {
    const apiEndpoint = `http://${_config.BACKEND_SERVER}/dc02-hardware-info`;
    const response = await fetch(apiEndpoint);
    if (!response.ok) {
      throw new Error(`Failed to fetch state: ${response.statusText}`);
    }
    return response.json();
  }

  async function loadBoxState() {
    const apiUrl = `http://${_config.BACKEND_SERVER}/load-machine-state`;
  
    try {
      const response = await fetch(apiUrl);
      if (!response.ok) {
        throw new Error("Failed to fetch state");
      }
  
      const data = await response.json();
      // Assuming applyBoxState correctly handles the array structure of data
      if (Array.isArray(data)) {
        applyBoxState(data);
        
	    return data;
      } else console.error('data object is not an array:', data);
    } catch (error) {
      console.error("Error loading state:", error);
    }
  }
  
async function checkNH_Rigs() {
    // const apiEndpoint = `http://${config.SSH_SERVER_IP}/get-nh-rig-status`;
    const apiEndpoint = `http://${_config.SSH_SERVER}/get-nh-rig-status`;
    const response = await fetch(apiEndpoint);
    if (!response.ok) {
      throw new Error(`Failed to fetch state: ${response.statusText}`);
    }
    rigs = await response.json();
    const rigsNotMining = rigs.filter(rig => rig.minerStatus !== 'MINING');
    console.log("Rigs Not Mining:", rigsNotMining);
}

// checkNH_Rigs()


// === FrontEnd\public\MachineControlPanelPage\bash_cmd.js ===

function getNicInfoString() {
    return `
        ip addr | awk '
            /^[0-9]+:/ {
                if (iface != "" && mac != "") print iface ": " mac;
                iface = $2; sub(/:$/, "", iface); mac = "";
            }
            $1 == "link/ether" { mac = $2; }
            END {
                if (iface != "" && mac != "") print iface ": " mac;
            }
        '`;
}

function getGPUInfoString() {
    return 'nvidia-smi -L';
}


// === FrontEnd\public\MachineControlPanelPage\boxFactory\boxFactory.js ===


    function addButton(container, text, id, onClick) {
        const button = document.createElement('button');
        button.textContent = text;
        button.className = 'button-86';
        button.id = id;
        button.addEventListener('click', onClick);
        container.appendChild(button);
    }
    

class BoxContainerManager {
    constructor() {
        this.rows = [];
        this.rowMap = {};
        this.root = document.getElementById('boxFactoryRoot');
        if (!this.root) {
            console.error('Root container not found');
            return;
        }
        this.createHeader();
    }

    createHeader() {
        const rootHeader = document.createElement('div');
        rootHeader.className = '';
        rootHeader.id = 'sectionHeader'
        rootHeader.textContent = '';
        this.root.appendChild(rootHeader);

        addButton(rootHeader, 'Select All', 'selectAllBtn', () => this.selectAllBoxes());
        addButton(rootHeader, 'Clear', 'clearAllBtn', () => this.clearAllSelection());
    }

    createRowContainer(sectionId, rowLabel, RowContainerClass = RowContainerBase, ...additionalArgs) {
        // Check if the row already exists to prevent duplicates
        if (this.rowMap[rowLabel]) {
            console.warn(`Row ${rowLabel} already exists.`);
            return;
        }
    
        // Find or create the section-container for the new row
        let sectionContainer = this.root.querySelector('.section-container');
        if (!sectionContainer) {
            sectionContainer = document.createElement('div');
            sectionContainer.className = 'section-container';
            this.root.appendChild(sectionContainer); // Append the section-container directly to the root
        }
    
        // Find or create the section for the new row
        let section = sectionContainer.querySelector(`#${sectionId}`);
        if (!section) {
            section = document.createElement('div');
            section.className = 'section';
            section.id = sectionId;
            sectionContainer.appendChild(section); // Append the section to the section-container
        }
    
        // Instantiate the RowContainer with the provided class and additional arguments
        const rowContainerInstance = new RowContainerClass(sectionId, rowLabel, ...additionalArgs);
    
        // Check if rowContainerInstance properly created its container
        if (rowContainerInstance.container) {
            section.appendChild(rowContainerInstance.container); // Append the row container to the newly created or existing section
            this.rows.push(rowContainerInstance);
            this.rowMap[rowLabel] = rowContainerInstance;
        } else {
            console.error("Failed to create or access row container.");
        }
    }
    

    getRow(rowLabel) {
        // Return the row if it exists, otherwise return undefined
        return this.rowMap[rowLabel];
    }

    updateAllBoxBehaviors(eventHandlers) {
        this.rows.forEach(row => row.updateAllBoxBehaviors(eventHandlers));
    }

    getInfoAll() {
        return this.rows.reduce((acc, row) => acc.concat(...row.getInfoRow()), []);
    }

    getObjAll() {
        const allObjects = [];
        this.rows.forEach(row => {
            allObjects.push(...row.getObjRow());
        });
        return allObjects;
    }

    getIpAll() {
        const allIps = [];
        this.rows.forEach(row => {
            allIps.push(...row.getIpRow());
        });
        return allIps;
    }

    getSelectedBoxesAll() {
        let selectedBoxesAll = [];
        this.rows.forEach(row => {
            selectedBoxesAll.push(...row.getSelectedBoxesRow())
        });
        return selectedBoxesAll
    }

    getSelectedBoxesIps() {
        // Use getSelectedBoxesAll to get all selected boxes
        const selectedBoxes = this.getSelectedBoxesAll();
        // Map over these boxes to extract the 'ip' property
        const selectedIps = selectedBoxes.map(box => box.ip);
        return selectedIps;
    }

    selectAllBoxes() {
        this.rows.forEach(row => row.selectAllRowBoxes());
    }

    clearAllSelection() {
        this.rows.forEach(row => row.clearRowSelection())
    }

    getMachineCount() {
        return this.getObjAll().length
    }

}

class RowContainerBase {
    constructor(sectionId, rowLabel) {
        this.sectionId = sectionId;
        this.rowLabel = rowLabel;
        this.racks = []; // This will store RackContainer instances

        // Directly initialize the container for the row, no need for an additional 'rowContainer'.
        this.container = document.createElement('div');
        this.container.className = 'row-container';
        this.container.setAttribute('data-row', this.rowLabel);

        // You might not need 'sectionContainer' here unless it's used differently than shown.
        // If each row is directly within a 'section', that should be handled in BoxContainerManager.

        this.createHeader(); // Create the header as part of the row container initialization.
    }

    initializeContainer() {
        this.sectionContainer = document.createElement('div');
        this.sectionContainer.className = 'section';
        this.sectionContainer.id = this.sectionId

        // Assuming rowContainer is the main container for this row
        this.rowContainer = document.createElement('div');
        this.rowContainer.className = 'row-container';
        this.rowContainer.setAttribute('data-row', this.rowLabel);
        this.sectionContainer.appendChild(this.rowContainer);

        this.createHeader();
    }

    createHeader() {
        const header = document.createElement('div');
        header.className = 'row-container-header';
        header.textContent = `Section: ${this.sectionId}, Row: ${this.rowLabel}`;

        // Create and append "Select All" button
        const selectAllBtn = document.createElement('button');
        selectAllBtn.textContent = 'Select All';
        selectAllBtn.addEventListener('click', () => this.selectAllRowBoxes());
        header.appendChild(selectAllBtn);

        // Create and append "Clear" button
        const clearBtn = document.createElement('button');
        clearBtn.textContent = 'Clear';
        clearBtn.addEventListener('click', () => this.clearRowSelection());
        header.appendChild(clearBtn);

        // Append the header directly to the row's container.
        this.container.appendChild(header);
    }


    addRack(rackLabel, defaultBoxCount = 20, RackContainerClass = RackContainerBase, ...additionalArgs) {
        // Dynamically create an instance of the provided RackContainerClass
        // The constructor of RackContainerClass should be designed to accept sectionId, rowLabel, and rackLabel as its first three parameters
        // followed by any additional arguments that might be specific to the specialized class
        const rack = new RackContainerClass(this.sectionId, this.rowLabel, rackLabel, defaultBoxCount, ...additionalArgs);
        this.container.appendChild(rack.container);
        this.racks.push(rack);
    }

    updateAllBoxBehaviors(eventHandlers) {
        this.racks.forEach(rack => rack.updateAllBoxBehaviors(eventHandlers));
    }

    getObjRow() {
        let objRow = [];
        this.racks.forEach(rack => {
            objRow.push(...rack.getObjects());
        });
        return objRow;
    }

    getInfoRow() {
        const rowInfo = [];
        this.racks.forEach(rack => {
            rowInfo.push(...rack.getInfoRack());
        });
        return rowInfo;
    }

    getIpRow() {
        let ipRow = [];
        this.racks.forEach(rack => {
            ipRow.push(...rack.getIpRack());
        });
        return ipRow;
    }
    
    getSelectedBoxesRow() {
        let selectedBoxesRow = [];
        this.racks.forEach(rack => {
            selectedBoxesRow.push(...rack.getSelectedBoxesRack())
        });
        return selectedBoxesRow
    }

    selectAllRowBoxes() {
        this.racks.forEach(rack => rack.selectAllRackBoxes());
    }

    clearRowSelection() {
        this.racks.forEach(rack => rack.clearRackSelection());
    }


}

class RackContainerBase{
    constructor(sectionId, rowLabel, rackLabel, defaultBoxCount = 20) {
        this.sectionId = sectionId;
        this.rowLabel = rowLabel;
        this.rackLabel = rackLabel;
        this._selectedBoxesRack = new Set(); // To track selected boxes
        this.defaultBoxCount = defaultBoxCount;
        this.boxes = []; // Store box instances
        this.initializeContainer();
        this.createDefaultBoxes();
    }

    initializeContainer() {
        const section = document.getElementById(this.sectionId);
        if (!section) {
            console.error(`Section with ID '${this.sectionId}' not found.`);
            return;
        }

        let rowContainer = section.querySelector(`.${this.rowLabel}-row-container`);
        if (!rowContainer) {
            rowContainer = document.createElement('div');
            rowContainer.className = `${this.rowLabel}-row-container row-container`;
            rowContainer.setAttribute('data-row', this.rowLabel);
            section.appendChild(rowContainer);
        }

        this.container = document.createElement('div');
        this.container.className = 'rack-container';
        rowContainer.appendChild(this.container);

        this.createHeader();
        this.createBoxesContainer();
    }

    createHeader() {
        const header = document.createElement('div');
        header.className = 'box-container-header';
        this.container.appendChild(header);
        console.log('not implemented');
    }

    createBoxesContainer() {
        this.boxesContainer = document.createElement('div');
        this.boxesContainer.className = 'boxes-container'; // Ensure this line is correctly assigning the class
        this.container.appendChild(this.boxesContainer);
    }

    createDefaultBoxes() {
        for (let i = 1; i <= this.defaultBoxCount; i++) {
            this.addBox(i, {});
        }
    }

    addBox(index, eventHandlers = {}) {
        const box = new Box(this.rowLabel, this.rackLabel, index, eventHandlers);
        this.boxesContainer.appendChild(box.element);
        this.boxes.push(box);
    }

    updateAllBoxBehaviors(eventHandlers) {
        this.boxes.forEach(box => box.updateEventHandlers(eventHandlers));
    }

    setBoxCount(newCount) {
        const currentCount = this.boxes.length;
        if (newCount > currentCount) {
            // Add more boxes if newCount is greater than currentCount
            for (let i = currentCount + 1; i <= newCount; i++) {
                this.addBox(i, { click: () => console.log(`Box ${i} clicked`) });
            }
        } else if (newCount < currentCount) {
            // Remove boxes if newCount is less than currentCount
            for (let i = currentCount; i > newCount; i--) {
                const boxToRemove = this.boxes.pop();
                boxToRemove.element.remove(); // Assuming element is the DOM element of the box
            }
        }
    }

    getObjects() {
        return this.boxes;
    }

    

    getInfoRack() {
        const rackInfo = [];
        this.boxes.forEach(box => {
            rackInfo.push(box.getInfo());
        });
        return rackInfo;
    }

    getIpRack() {
        const rackInfo = [];
        this.boxes.forEach(box => {
            rackInfo.push(box.getIp());
        });
        return rackInfo;
    }

    getSelectedBoxesRack() {
        return this._selectedBoxesRack
    }
}

class SpecializedRackContainer extends RackContainerBase {
    constructor(sectionId, rowLabel, rackLabel, defaultBoxCount) {
        super(sectionId, rowLabel, rackLabel, defaultBoxCount);
        // Additional initialization for SpecializedRackContainer
    }

    createHeader() {
        const header = document.createElement('div');
        header.className = 'box-container-header';
        // Dynamically create the header text to include row and rack labels
        header.textContent = `Row: ${this.rowLabel} Rack: ${this.rackLabel}`;
        this.container.appendChild(header);

        // Create and append "Select All" button
        const selectAllBtn = document.createElement('button');
        selectAllBtn.textContent = 'Select All';
        selectAllBtn.addEventListener('click', () => this.selectAllRackBoxes());
        header.appendChild(selectAllBtn);

        // Create and append "Clear" button
        const clearBtn = document.createElement('button');
        clearBtn.textContent = 'Clear';
        clearBtn.addEventListener('click', () => this.clearRackSelection());
        header.appendChild(clearBtn);
    }

    // Override addBox to include specialized behavior
    addBox(index, eventHandlers = {}) {
        const boxObject = super.addBox(index, {
            ...eventHandlers,
            click: (event) => {
                // Find the box object as before
                const currentIndex = this.boxes.findIndex(box => box.element === event.currentTarget);
                const box = this.boxes[currentIndex];
                box.toggleSelected(); // Toggle selection state using the Box's method
                if (box.isSelected()) {
                    // DEBUGGING LINE
                    //////////////////////////////////////////////////////
                    // console.log('adding box to selected list:', box)
                    //////////////////////////////////////////////////////

                    this._selectedBoxesRack.add(box);

                    // DEBUGGING LINE
                    //////////////////////////////////////////////////////
                    // console.log('added to list:', this.selectedBoxes)
                    //////////////////////////////////////////////////////
                } else {
                    this._selectedBoxesRack.delete(box);
                }

                // DEBUGGING LINE
                //////////////////////////////////////////////////////
                // console.log(`Specialized box ${index} clicked ;)`);
                //////////////////////////////////////////////////////

                eventHandlers.click?.(event);
            }
        });
    }

    selectAllRackBoxes() {
        this.boxes.forEach(box => {
            // Only select boxes that aren't already selected
            if (!box.isSelected()) {
                box.toggleSelected(); // This updates both the class and the selected state
                this._selectedBoxesRack.add(box); // Keep track of selected boxes
                
            }
        });
    }

    clearRackSelection() {
        this.boxes.forEach(box => {
            box.clearSelection();
        });
        this._selectedBoxesRack.clear();
        // DEBUGGING LINE
        //////////////////////////////////////////////////////
        // console.log(this.selectedBoxes);
        //////////////////////////////////////////////////////
    }
}


class Box {
    constructor(rowLabel, rackLabel, index, eventHandlers = {}) {
        this.rowLabel = rowLabel;
        this.rackLabel = rackLabel;
        this.index = index;
        this.id = `${rowLabel}-${rackLabel}-${index}`;
        this.ip = this.generateMachineIP();
        this.element = this.createElement();
        this.setEventHandlers(eventHandlers);
        this._isRunning = false
        this._isSelected = false;
    }

    generateMachineIP() {
        const networkBase = "10.10"; // Assuming this method correctly formulates the IP
        return `${networkBase}.${this.rackLabel}.${this.index}`;
    }

    getIp() {
        return this.ip;
    }

    setIp(newIp) {
        const ipRegex = /\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b/; // Regular expression for IPv4 validation
        if (ipRegex.test(newIp)) {
            this.ip = newIp;
        } else {
            console.error("Invalid IPv4 address format");
            // Optionally, you can throw an error or handle the invalid input differently
        }
    }

    createElement() {
        const boxId = this.id;
        const box = document.createElement('div');
        box.className = 'box drag-selectable';
        box.id = boxId;
        box.textContent = this.index; // Assuming this sets the content correctly
        box.setAttribute('data-ip', this.generateMachineIP()); // Correctly storing the IP
        return box;
    }

    setEventHandlers(eventHandlers) {
        Object.keys(eventHandlers).forEach(eventType => {
            this.element.removeEventListener(eventType, this[eventType]); // Remove previous listener if any
            this[eventType] = eventHandlers[eventType]; // Store reference for removal
            this.element.addEventListener(eventType, this[eventType]);
        });
    }

    updateEventHandlers(eventHandlers) {
        this.setEventHandlers(eventHandlers);
    }

    toggleSelected() {
        this._isSelected = !this._isSelected;
        if (this._isSelected) {
            this.element.classList.add('drag-selected');
        } else {
            this.element.classList.remove('drag-selected');
        }
        console.log(`Box ${this.id} selected: ${this._isSelected}`);
    }

    getInfo() {
        const info = {};
        // Iterate over all properties of the instance
        Object.keys(this).forEach((key) => {
            // Add each property to the info object
            info[key] = this[key];
        });
        // Return the info within an object using the box's id as the key
        return { [this.id]: info };
    }

    // Method to add an arbitrary number of key-value pairs as properties
    addProperties(properties) {
        Object.entries(properties).forEach(([key, value]) => {
            this[key] = value;
        });
    }

    getStatus() {
        return this._isRunning
    }

    setStatus(val) {
        this._isRunning = val
    }

    isSelected() {
        return this._isSelected
    }

    clearSelection() {
        if (this._isSelected) { // Check if the box is currently selected
            this._isSelected = false; // Update the selection state to false
            this.element.classList.remove('drag-selected'); // Visually unselect the box
            console.log(`Box ${this.id} selection cleared`);
        }
    }
}







// === FrontEnd\public\MachineControlPanelPage\boxFactory\boxFactoryImp.js ===



// === FrontEnd\public\MachineControlPanelPage\machine-control-panel.html ===

<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Box Highlighter</title>
  <link rel="stylesheet" href="styles.css" />

  <!-- Highlight.js styles -->
  <style>
    textarea[is="highlighted-code"] {
      padding: 8px;
    }
  </style>
  <link rel="stylesheet" href="../highlight/styles/obsidian.css" />
  <script src="../highlight/highlight.min.js"></script>
  <script>
    hljs.highlightAll();
  </script>
  <script type="module">
    (async ({ chrome, netscape }) => {
      // add Safari polyfill if needed
      if (!chrome && !netscape)
        await import("https://unpkg.com/@ungap/custom-elements");

      const { default: HighlightedCode } = await import(
        "https://unpkg.com/highlighted-code"
      );

      // bootstrap a theme through one of these names
      // https://github.com/highlightjs/highlight.js/tree/main/src/styles
      HighlightedCode.useTheme("github-dark");
    })(self);
  </script>
</head>

<body>
  <div id="top-level-buttons" class="top-level-buttons">
    <!-- Buttons will be added here dynamically -->
    <!-- <button id="selectAllBtn">Select All</button>
    <button id="clearAllBtn">Clear All</button> -->
    <button id="getNodeStatusBtn">Update Node Status</button>
    <button id="runCustomScriptBtn">Run Custom Script</button>
    <button id="backBtn">Back</button>
    <button id="logoutBtn">Logout</button>
  </div>

  <div id="customScriptModal" class="modal">
    <div class="modal-content">
      <span class="close">&times;</span>
        <div id="customScriptModalHeaderContainer">
          <div id="customScriptModalHeader">
            <h2>Custom Script Runner</h2>
          </div>
          <div id="customScriptModalExecutionStatus">Execution Status:</div>
        </div>
      <!-- Tab Menu -->
      <div class="tab">
        <button class="tablinks" onclick="openTab(event, 'BashInput')">
          Bash Input
        </button>
        <button class="tablinks" onclick="openTab(event, 'BashOutput')">
          Bash Output
        </button>
      </div>

      <!-- Bash Input Tab -->
      <div id="BashInput" class="tabcontent">
        <div id="selectedMachines"></div>
        <textarea is="highlighted-code" id="textareaInput" language="bash" cols="80" rows="12"
          placeholder="# Your bash script goes here" style="overflow: auto; width: 100%"></textarea>
        <button id="startCommandBtn">Start</button>
      </div>

      <!-- Bash Output Tab -->
      <div id="BashOutput" class="tabcontent bash-output-container" style="display: none">
        <pre><code>
                <!-- Bash Output -->
            </code></pre>
      </div>
    </div>
  </div>

  <div class="main-container" id="boxFactoryRoot">
    <div id="total-running-machines">Total Running Machines: <span id="running-machines-placeholder">*</span>/<span id="total-machines-placeholder">*</span></div>
    <!-- <div class="section" id="section-A"></div>
    <div class="section" id="section-B"></div> -->
  </div>
  <script src="../scripts/config.js"></script>
  <script src="../bash_cmd.js"></script>
  <script src="./machine-control-panel.js"></script>
  <script src="./api.js"></script>
  <script src="./boxFactory/boxFactory.js"></script>
  <!-- <script type="module">
      import { dragSelect } from "../dragSelect.js";
      import { debugInfo } from "../debug.js";

      globalThis.debugInfo = debugInfo;

      const mainContainer = document.querySelector(".main-container");
      dragSelect(mainContainer, {
        itemSelector: ".drag-selectable", // Ensure your boxes have this class
        areaClassName: "drag-select-area", // Ensure you have CSS for this
      });
    </script> -->

  <!-- TESTING SCRIPT -->
  <!-- <script src="../../TestCode/testBashOutput.js"></script> -->
  <!-- END TESTING -->

  <script>
    function openTab(evt, tabName) {
      // Use const for variables that do not change 
      const tabcontent = document.getElementsByClassName("tabcontent");
      const tablinks = document.getElementsByClassName("tablinks");

      // Use Array.from() to convert HTMLCollections to arrays. This allows use of forEach 
      Array.from(tabcontent).forEach((element) => {
        element.style.display = "none"; // Hide all tab content 
      });

      Array.from(tablinks).forEach((element) => {
        element.classList.remove("active"); // Remove 'active' class from all tabs 
      });

      // Display the selected tab content and add 'active' class to the clicked tab 
      document.getElementById(tabName).style.display = "block";
      evt.currentTarget.classList.add("active");
    }

    // Set default open tab (optional) 
    // Use querySelector to directly click on the default open tab if present 
    document.querySelector(".tablinks.defaultOpen")?.click();


  </script>
  <script>
    
    document.addEventListener("DOMContentLoaded", () => {
      const manager = new BoxContainerManager();
      window.manager = manager; // Make it globally accessible

      // Add a couple of rows with some racks for demonstration purposes
      manager.createRowContainer("section-A", "A1");
      manager.createRowContainer("section-A", "A2");
      manager.createRowContainer("section-B", "B1");
      manager.createRowContainer("section-B", "B2");

      // Now, assuming both RowContainer and RackContainer instances have been properly setup
      // and that boxes have been added to racks in those rows, we update all box behaviors:

      // Get a row and add racks to it
      const rowA1 = manager.getRow("A1");
      const rowA2 = manager.getRow("A2");
      const rowB1 = manager.getRow("B1");
      const rowB2 = manager.getRow("B2");
      
        rowA1.addRack("11", 20, SpecializedRackContainer);
        rowA1.addRack("12", 20, SpecializedRackContainer);
        rowA1.addRack("13", 20, SpecializedRackContainer);
        rowA1.addRack("14", 20, SpecializedRackContainer);

        rowA2.addRack("21", 20, SpecializedRackContainer);
        rowA2.addRack("22", 20, SpecializedRackContainer);
        rowA2.addRack("23", 20, SpecializedRackContainer);
        rowA2.addRack("24", 20, SpecializedRackContainer);
        rowA2.addRack("25", 20, SpecializedRackContainer);

        rowB1.addRack("111", 20, SpecializedRackContainer);
        rowB1.addRack("112", 20, SpecializedRackContainer);
        rowB1.addRack("113", 20, SpecializedRackContainer);

        rowB2.addRack("121", 20, SpecializedRackContainer);
        rowB2.addRack("122", 20, SpecializedRackContainer);
        rowB2.addRack("123", 20, SpecializedRackContainer);
        rowB2.addRack("124", 20, SpecializedRackContainer);
        rowB2.addRack("125", 20, SpecializedRackContainer);


      //console.log(manager);
      //const allInfo = manager.getObjAll();
      //console.log(manager.getIpAll());
    });
  </script>
</body>

</html>


// === FrontEnd\public\MachineControlPanelPage\machine-control-panel.js ===

document.addEventListener("DOMContentLoaded", async () => {

  // REFACTOR CODE //
  /////////////////////////////////////////////////////

  function updateTotalMachines(runningMachines, totalMachines) {
    const runningMachinesPlaceholder = document.getElementById("running-machines-placeholder");
    const totalMachinesPlaceholder = document.getElementById("total-machines-placeholder");

    // Update the placeholders with the actual values or '*' if they don't have a value
    runningMachinesPlaceholder.textContent = runningMachines !== undefined ? runningMachines : '*';
    totalMachinesPlaceholder.textContent = totalMachines !== undefined ? totalMachines : '*';
  }

  async function initializeBoxState() {
    let boxState;
    try {
      boxState = await loadBoxState();
      // Proceed with operations that depend on boxState
      const runningMachines = countRunningMachines(boxState);
      const totalMachines = manager.getMachineCount();
      updateTotalMachines(runningMachines, totalMachines);
    } catch (error) {
      console.error(error);
      // Handle error, possibly updating the UI to reflect the failure
    }
  }

  // Call initializeBoxState without awaiting it, allowing the DOMContentLoaded event to complete.
  initializeBoxState();
  //////////////////////////////////////////////////////

  const runCustomScriptBtn = document.getElementById("runCustomScriptBtn");
  const customScriptModal = document.getElementById("customScriptModal");
  const textareaContainer = document.getElementById("textareaContainer");
  const textareaInput = document.getElementById("textareaInput");
  const closeBtn = customScriptModal.querySelector(".close");
  const startCommandBtn = document.getElementById("startCommandBtn");
  const updateNodesBtn = document.getElementById("getNodeStatusBtn");
  const logoutBtn = document.getElementById('logoutBtn');
  const selectAllBtn = document.getElementById('selectAllBtn');
  const clearAllBtn = document.getElementById('clearAllBtn');

  runCustomScriptBtn.addEventListener("click", () => {
    customScriptModal.style.display = "block";
    displaySelectedMachines();
  });

  closeBtn.addEventListener("click", () => {
    customScriptModal.style.display = "none";
  });

  window.onclick = (event) => {
    //console.log(event.target);
    if (event.target == customScriptModal && !isMouseDownInsideTextarea) {
      customScriptModal.style.display = "none";
    }
  };

  let isMouseDownInsideTextarea = false;

  window.addEventListener("mousedown", (event) => {
    // console.log(event.target);
    if (event.target == textareaContainer || event.target == textareaInput) {
      // console.log("Mouse down inside textarea");
      isMouseDownInsideTextarea = true;
    } else isMouseDownInsideTextarea = false;
  });

  function openTab(evt, tabName) {
    // Use const for variables that do not change
    const tabcontent = document.getElementsByClassName("tabcontent");
    const tablinks = document.getElementsByClassName("tablinks");

    // Use Array.from() to convert HTMLCollections to arrays. This allows use of forEach
    Array.from(tabcontent).forEach((element) => {
      element.style.display = "none"; // Hide all tab content
    });

    Array.from(tablinks).forEach((element) => {
      element.classList.remove("active"); // Remove 'active' class from all tabs
    });

    // Display the selected tab content and add 'active' class to the clicked tab
    document.getElementById(tabName).style.display = "block";
    evt.currentTarget.classList.add("active");
  }

  // Set default open tab (optional)
  // Use querySelector to directly click on the default open tab if present
  document.querySelector(".tablinks.defaultOpen")?.click();

  function displaySelectedMachines() {
    const selectedMachinesDiv = document.getElementById("selectedMachines");
    selectedMachinesDiv.innerHTML = ""; // Clear previous content
    const selectedIPs = manager.getSelectedBoxesIps();

    // Use the manager object to find selected machines
    selectedIPs.forEach(ip => {
      const machineDiv = document.createElement("div");
      machineDiv.textContent = `Machine IP: ${ip}`; // Use the IP directly
      selectedMachinesDiv.appendChild(machineDiv);
    });
  }
  // Add an event listener for the click event on the logout button
  logoutBtn.addEventListener('click', async function () {
    console.log("Logging out...");
    // Retrieve the token from localStorage
    const token = localStorage.getItem('token');

    // If a token exists, send a logout request to the server
    if (token) {
      await fetch('/logout', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      // Regardless of the server's response, remove the token from localStorage
      localStorage.removeItem('token');
    }

    // Redirect the user to the login page
    window.location.href = '/LoginPage/login.html';
  });

  // selectAllBtn.addEventListener("click", () => {
  //   console.log(manager.selectAllBoxes(),'selectAllBtn clicked')
  //   // manager.selectAllBtn()
  // })

  // clearAllBtn.addEventListener("click", () => {
  //   console.log(manager.clearAllSelection(),'clearAllBtn clicked')
  //   // manager.clearAllBtn()
  // })

  let commandExecutions = {
    completed: [],
    pending: []
};

startCommandBtn.addEventListener("click", async () => {
  console.log('running start command');
  const bashCode = document.getElementById("textareaInput").value;
  const ipsString = manager.getSelectedBoxesIps();

  console.log("Sending Bash Script and IPs to server:", bashCode, ipsString);

  // Utility function to append messages to the modal
  const updateExecutionStatus = (message, isError = false) => {
      const statusDiv = document.getElementById("customScriptModalExecutionStatus");
      const messageElement = document.createElement("div");
      messageElement.textContent = message;
      if (isError) {
          // messageElement.style.color = "red";
      } else {
        statusDiv.appendChild(messageElement);
      }
  };

  const executeCommand = async () => {
      try {
          const result = await executeScript(ipsString, bashCode);
          console.log("Execution Result:", result);
          displayBashOutput(result);
          console.log("after");
          return {status: 'completed', result};
      } catch (error) {
          console.error("Error executing script:", error);
          throw {status: 'failed', error}; // Include status in thrown error for consistency
      }
  };

  const handleCompletion = (index, result) => {
      commandExecutions.completed.push({index, ...result});
      commandExecutions.pending = commandExecutions.pending.filter(item => item !== index);
      if (result.status === 'completed') {
          updateExecutionStatus(`Command ${index} completed successfully.`);
      } else {
          updateExecutionStatus(`Command ${index} failed: ${result.error}`, true);
      }
  };

  const commandIndex = commandExecutions.pending.length + commandExecutions.completed.length;
  commandExecutions.pending.push(commandIndex);

  // Append initial pending status
  updateExecutionStatus(`Command ${commandIndex} is pending execution.`);

  executeCommand().then(result => {
      console.log(`Command ${commandIndex} completed`, result);
      handleCompletion(commandIndex, result);
  }).catch(error => {
      console.error(`Command ${commandIndex} failed`, error);
      handleCompletion(commandIndex, error);
  });

  console.log(`Command ${commandIndex} is being executed`);
  console.log('current commands:', commandExecutions);
});


  updateNodesBtn.addEventListener("click", async () => {
      const ipsString = manager.getIpAll();
      const bashCode = getNicInfoString()

      console.log("Sending Node Info to /execute-script:", bashCode, ipsString);
      // return
      try {
        const executeResult = await executeScript(ipsString, bashCode);
        console.log('pre exe', executeResult);
        const mappedInfo = processExecutionResult(executeResult)

        console.log("Execution Result:", mappedInfo);
        displayBashOutput(Object.values(mappedInfo));
        const mappedArrayFormatted = reformatJsonArray(Object.values(mappedInfo));
        // Forwarding the response to another endpoint
        console.log('formateed arr', mappedArrayFormatted);
        const updateResult = await updateMachineState(mappedArrayFormatted);
        console.log("Update Machine State Result:", updateResult);
      } catch (error) {
        console.error("Error in processing:", error);
      }
    });


  function displayBashOutput(mappedArray) {
    const bashOutputContainer = document.getElementById("BashOutput");
    bashOutputContainer.innerHTML = ""; // Clear existing content

    mappedArray.forEach((item, index) => {
      const obj = item.data; // Data is nested under 'data'
      const id = obj.ip; // IP is now under obj.data.ip

      // Check if the item is in the first format with a unique key
      if (Object.keys(item).length === 1 && Object.keys(item)[0] !== "ip") {
        id = Object.keys(item)[0];
        obj = item[id];
      } else {
        // Assume it's in the second format
        obj = item;
        id = obj.ip;
      }

      const elementId = `collapse-${index}`;
      const wrapperDiv = document.createElement("div");
      wrapperDiv.classList.add("collapsible-wrapper");

      const button = document.createElement("button");
      button.textContent = id + (obj.error ? ` - Error` : ` - Result`);
      button.classList.add("collapsible-btn");
      button.setAttribute("type", "button");
      button.setAttribute("data-target", elementId);

      const contentDiv = document.createElement("div");
      contentDiv.id = elementId;
      contentDiv.classList.add("collapsible-content");
      contentDiv.style.display = "none"; // Initially hidden

      const pre = document.createElement("pre");
      const code = document.createElement("code");
      code.className = "language-bash"; // Ensure this class is set for Highlight.js

      // Handle content based on whether it's an error or a result
      if (obj.error) {
        code.textContent = `Error: ${obj.error}`;
      } else if (obj.result && obj.result.cmd) {
        code.textContent = `IP: ${id}\nCommand:\n${obj.result.cmd}\nOutput:\n${obj.result.output}`;
      } else {
        code.textContent = `No detailed information available.`;
      }

      pre.appendChild(code);
      contentDiv.appendChild(pre);
      wrapperDiv.appendChild(button);
      wrapperDiv.appendChild(contentDiv);
      bashOutputContainer.appendChild(wrapperDiv);

      button.addEventListener("click", function () {
        const target = document.getElementById(this.getAttribute("data-target"));
        if (target.style.display === "none") {
          target.style.display = "block";
          // Apply highlighting when the content is shown
          hljs.highlightElement(code); // Make sure to highlight after appending
        } else {
          target.style.display = "none";
        }
      });
    });
  }
});


async function applyBoxState(savedStates) {
  try {
    // Fetch the hardware information from the API

    const DC02_HARDWARE = await fetchHardwareInfo();
    let a = checkBoxPosition(DC02_HARDWARE, savedStates);
    console.log('mismatched', a)
    document.querySelectorAll(".box").forEach((box) => {
      const boxState = savedStates.find((state) => state.machine_id === box.id);

      // Clear previous mismatch class if any
      box.classList.remove("box_mismatch");

      // Apply colors based on saved states, if available
      if (boxState && boxState.data.color) {
        box.style.backgroundColor = boxState.data.color;
      } else {
        box.style.backgroundColor = ""; // Set to your default color or remove the style
      }

      // Check if the box ID is in the mismatch array and add 'box_mismatch' class
      const isMismatched = a.some((mismatch) =>
        mismatch.hasOwnProperty(box.id)
      );
      if (isMismatched) {
        box.classList.add("box_mismatch");
      }
    });
  } catch (error) {
    console.error("Error fetching hardware information:", error);
  }
}

function generateIdFromIp(ip) {
  const octets = ip.split(".").map(Number);
  if (octets.length !== 4) {
    throw new Error("Invalid IP address format");
  }

  const [network1, network2, thirdOctet, machineNumber] = octets;

  // Determine if third octet is in the specified range for Section A
  const sectionARange = [11, 12, 13, 14, 21, 22, 23, 24, 25];
  const sectionBRange = [111, 112, 113, 121, 122, 123, 124, 125];
  let section;
  if (sectionARange.includes(thirdOctet)) {
    section = "A";
  } else if (sectionBRange.includes(thirdOctet)) {
    section = "B";
  } else {
    section = "Unknown";
  }

  // Determine the number based on the range of the third octet
  let number;
  if (
    (thirdOctet >= 11 && thirdOctet <= 19) ||
    (thirdOctet >= 111 && thirdOctet <= 119)
  ) {
    number = 1;
  } else if (
    (thirdOctet >= 21 && thirdOctet <= 29) ||
    (thirdOctet >= 121 && thirdOctet <= 129)
  ) {
    number = 2;
  } else {
    number = "Unknown"; // Placeholder, adjust as needed
  }

  // Construct the ID
  const id = `${section}${number}-${thirdOctet}-${machineNumber}`;
  return id;
}

function reformatJsonArray(jsonArray, outputFile = null) {
  /*
    Transforms the input JSON array by filtering out entries with errors and reformatting the ethernet interface data.

    Example Transformation:

    Before:
    [{
      "machine1": {
        "ip": "192.168.1.1",
        "error": false,
        "result": {
          "cmd": "ip addr",
          "output": "eth0: 00:1A:2B:3C:4D:5E\neth1: 5F:4E:3D:2C:1B:0A"
        },
        "color": "green"
      }
    }]

    After:
    [{
      "machine1": {
        "ip": "192.168.1.1",
        "ethernet_interfaces": {
          "MAC (NIC-1) eth0": "00:1A:2B:3C:4D:5E",
          "MAC (NIC-2) eth1": "5F:4E:3D:2C:1B:0A"
        },
        "color": "green"
      }
    }]
  */

  // Reformats jsonArray, focusing on ethernet interface data and filtering out errors
  const reformattedArray = jsonArray
    // .filter((obj) => !obj[Object.keys(obj)[0]].error) // Filter out objects with "error" attribute
    .map((obj) => {
      const key = Object.keys(obj)[0]; // The ID of the machine
      const data = obj[key];
      if (data.result) {
        const { cmd, output } = data.result; // cmd is the executed command, output is its stdout
        const ethInterfaces = {};
        // Split the output by new lines, then map each line to a key-value pair under ethInterfaces
        output.split("\n").forEach((line) => {
          const [iface, mac] = line.split(": ");
          ethInterfaces[
            `MAC (NIC-${Object.keys(ethInterfaces).length + 1}) ${iface}`
          ] = mac;
        });
        return {
          [key]: {
            ip: data.ip, // IP address of the machine
            ethernet_interfaces: ethInterfaces, // Formatted ethernet interface data
            color: data.color, // Color coding (e.g., for error status)
          },
        };
      } else {
        return obj; // Return original object if no result data is present
      }
    });

  // Writes the reformatted array to a file if outputFile is specified
  if (outputFile) {
    fs.writeFileSync(outputFile, JSON.stringify(reformattedArray, null, 2));
  }

  return reformattedArray;
}

function checkBoxPosition(dcHardware, jsonArray) {
  if (dcHardware.length !== jsonArray.length) {
    throw new Error("The lengths of DC02_HARDWARE and JSON_ARRAY do not match.");
  }
  console.log(jsonArray)
  // Convert JSON_ARRAY to a lookup table by box ID for faster access
  const jsonArrayLookup = jsonArray.reduce((acc, item) => {
    acc[item.machine_id] = item.data;
    return acc;
  }, {});

  const mismatchedBoxes = dcHardware.map(boxData => {
    const boxId = boxData.machine_id;
    const jsonBoxData = jsonArrayLookup[boxId];
    if (!jsonBoxData) {
      console.error(`Matching entry for ${boxId} not found in JSON_ARRAY.`);
      return null; // Skipping unmatched boxData, might adjust based on requirements
    }

    // Access 'ethernet_interfaces' within the 'data' structure
    const ethernetInterfaces1 = boxData.data.ethernet_interfaces;
    const ethernetInterfaces2 = jsonBoxData.ethernet_interfaces;

    if (!ethernetInterfaces1 || !ethernetInterfaces2) return null;

    // Combine MAC address processing steps and compare
    const correctMacs = Object.values(ethernetInterfaces1).map(mac => mac.toLowerCase().trim());
    const actualMacs = Object.values(ethernetInterfaces2).map(mac => mac.toLowerCase().trim());

    const isMismatch = !correctMacs.some(mac => actualMacs.includes(mac));
    if (isMismatch) {
      const mismatchedMac = actualMacs.find(mac => !correctMacs.includes(mac)) || actualMacs[0]; // Assuming at least one MAC address is present
      const machineId = findMachineIdByMac(dcHardware, mismatchedMac);
      return {
        [boxId]: {
          correct_macs: ethernetInterfaces1,
          actual_macs: ethernetInterfaces2,
          msg: machineId
            ? `The MAC '${mismatchedMac}' is supposed to be in machine ${machineId}`
            : `No machines on the network have the following NICs: ${mismatchedMac}`
        }
      };
    }
    return null;
  }).filter(box => box !== null); // Remove nulls from mismatches

  return mismatchedBoxes;
}

function findMachineIdByMac(data, mac) {
  // console.log(data[101])
  for (const entry of data) {
    const id = entry.machine_id;
    const info = entry.data;
    if (info.ethernet_interfaces) {
      const macs = Object.values(info.ethernet_interfaces).map((mac) =>
        mac.toLowerCase().trim()
      );
      if (macs.includes(mac)) {
        return id;
      }
    }
  }
  return 0; // Return 0 if no matching machine ID is found to indicate that no network machines have the given NICs
}

function processExecutionResult(executeResult) {
  const mappedInfo = executeResult.map(({ ip, ...rest }) => {
    const id = generateIdFromIp(ip); // Generate ID based on the IP
    return {
      [id]: { // Use computed property names to set the key
        ip,
        ...rest,
        color: rest.error ? "red" : "green", // Assign color based on error presence
      }
    };
  });

  return mappedInfo;
}

function countRunningMachines(jsonData) {
  let greenCounter = 0;

  // Iterate over each object in the array
  jsonData.forEach(obj => {
    // Iterate over the properties of each object
    Object.values(obj).forEach(value => {
      // Check if the color property is "green"
      if (value.color === "green") {
        greenCounter++;
      }
    });
  });

  return greenCounter;
}


// === FrontEnd\public\MachineControlPanelPage\styles.css ===

body {
  background-color: #1a1a1a; /* Dark gray background */
  color: #ffffff; /* White text color for better contrast */
  /* min-height: 100vh; 100% of the viewport height */
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  justify-content: center;
  border: 2px solid white;
}

.main-container {
  display: flex; /* Use flexbox to make sections side by side */
    flex-wrap: wrap;
    justify-content: center;
    border: 2px solid white;
}

.section-container {
  display: flex;
  justify-content: space-between;
  position: relative;
  padding: 20px;
  border: 2px solid white;
}

.section {
  width: 48%;
  border: 2px solid white;
  padding: 50px;
  display: flex;
  /* flex-wrap: wrap; */
  justify-content: center;
}

/* REFACTOR */
/* //////////////////////////////////////// */
div#sectionHeader,#total-running-machines{
  display: flex;
    justify-content: center;
    align-items: center;
}
/* //////////////////////////////////////// */
.parent-box,
.rack-container {
  border: 2px solid white;
  margin-right: 10px;
  /* Space between boxes of the same row */
  padding: 10px;
  margin: 10px;
  flex: 0 0 auto;
  /* Prevent stretching */
}

.labels,
.box-container-header,
.button {
  margin-bottom: 10px;
  display: flex;
  /* Enable flexbox layout */
}

.boxes-container {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  gap: 5px;
}

.box {
  display: inline-block;
  border: 1px solid grey;
  text-align: center;
  height: 20px;
  width: 20px;
  padding: 10px;
  cursor: pointer;
  flex: 0 0 auto;
  /* Prevent boxes from stretching */
  -webkit-user-select: none;
  /* Safari */
  -moz-user-select: none;
  /* Firefox */
  -ms-user-select: none;
  /* Internet Explorer/Edge */
  user-select: none;
  /* Non-prefixed version, currently supported by Chrome, Opera and Edge */
}

.row-container {
  /* display: flex;
  flex-wrap: wrap; */
  margin-bottom: 10px;
  margin-bottom: 50px;
}

.header-row-span,
.header-rack-span {
  flex: 1;
  /* Each element takes equal space */
  text-align: center;
  /* Center the text */
}

.top-level-buttons {
  display: flex;
  justify-content: center;
  margin-top: 10px;
  /* Adjust as needed */
}

.top-level-buttons button {
  margin: 5px;
  padding: 10px 15px;
  background-color: #4caf50;
  /* Green background */
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
}

.top-level-buttons button:hover {
  background-color: #45a049;
  /* Darker green on hover */
}

.box-reset-button {
  margin: 5px;
  padding: 10px 15px;
  background-color: #4caf50;
  /* Green background */
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  font-size: 16px;
}

.green {
  background-color: green;
}

.yellow {
  background-color: yellow;
}

.red {
  background-color: red;
}

.none {
  background-color: transparent;
  /* or any default color */
}

/* The switch - the box around the slider */
.switch {
  position: relative;
  display: inline-block;
  width: 60px;
  height: 34px;
}

/* Hide default checkbox */
.switch input {
  opacity: 0;
  width: 0;
  height: 0;
}

/* The slider */
.slider {
  position: absolute;
  cursor: pointer;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: #ccc;
  -webkit-transition: 0.4s;
  transition: 0.4s;
}

.slider:before {
  position: absolute;
  content: "";
  height: 26px;
  width: 26px;
  left: 4px;
  bottom: 4px;
  background-color: white;
  -webkit-transition: 0.4s;
  transition: 0.4s;
}

input:checked+.slider {
  background-color: #2196f3;
}

input:focus+.slider {
  box-shadow: 0 0 1px #2196f3;
}

input:checked+.slider:before {
  -webkit-transform: translateX(26px);
  -ms-transform: translateX(26px);
  transform: translateX(26px);
}

/* Rounded sliders */
.slider.round {
  border-radius: 34px;
}

.slider.round:before {
  border-radius: 50%;
}

#overlay {
  display: none;
  /* Hidden by default */
  position: absolute;
  /* Sit on top of the page content */
  flex-direction: column;
  /* Stack children vertically */
  align-items: center;
  /* Center children horizontally */
  width: 100%;
  /* Full width (cover the whole page) */
  height: 100%;
  /* Full height (cover the whole page) */
  top: 0;
  left: 0;
  right: 0;
  background-color: rgba(0, 0, 0, 0.5);
  /* Black background with opacity */
  z-index: 2;
  /* Specify a stack order in case you're using a different order for other elements */
  cursor: pointer;
  /* Add a pointer on hover */
}

.loading-text {
  color: white;
  /* White text */
  font-weight: bold;
  /* Bold text */
  font-size: 2em;
  /* Larger text size */
  text-align: center;
  /* Center the text horizontally */
  margin-bottom: 20px;
  /* Space between text and waves */
  margin-top: 400px;
}

.center {
  height: auto;
  display: flex;
  justify-content: center;
  align-items: center;
}

.wave {
  width: 5px;
  height: 100px;
  background: linear-gradient(45deg, rgb(0, 255, 21), #00c8ff);
  margin: 10px;
  animation: wave 1s linear infinite;
  border-radius: 20px;
  -webkit-border-radius: 20px;
  -moz-border-radius: 20px;
  -ms-border-radius: 20px;
  -o-border-radius: 20px;
}

.wave:nth-child(2) {
  animation-delay: 0.1s;
}

.wave:nth-child(3) {
  animation-delay: 0.2s;
}

.wave:nth-child(4) {
  animation-delay: 0.3s;
}

.wave:nth-child(5) {
  animation-delay: 0.4s;
}

.wave:nth-child(6) {
  animation-delay: 0.5s;
}

.wave:nth-child(7) {
  animation-delay: 0.6s;
}

.wave:nth-child(8) {
  animation-delay: 0.7s;
}

.wave:nth-child(9) {
  animation-delay: 0.8s;
}

.wave:nth-child(10) {
  animation-delay: 0.9s;
}

@keyframes wave {
  0% {
    transform: scale(0);
  }

  50% {
    transform: scale(1);
  }

  100% {
    transform: scale(0);
  }
}

.drag-selectable-wrap {
  margin: 15px 150px;
  width: 535px;
  display: flex;
  flex-wrap: wrap;
  gap: 15px;
  justify-content: center;
  align-items: center;
}

.drag-select-area {
  background-color: hsl(210deg 80% 50% / 50%);
  border: 1px solid hsl(210deg 80% 50% / 75%);
  box-sizing: border-box;
}

.drag-selected {
  border: 2px solid #11e1ff;
  /* match border thickness to outline width. */
  margin: -2px;
}

/* TEMPORARY */
.modal {
  display: none;
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgb(0, 0, 0);
  background-color: rgba(0, 0, 0, 0.4);
}

.modal-content {
  background-color: #000000e0;
  margin: 15% auto;
  padding: 20px;
  border: 1px solid #888;
  width: 80%;
}

.close {
  color: #aaa;
  float: right;
  font-size: 28px;
  font-weight: bold;
}

.close:hover,
.close:focus {
  color: black;
  text-decoration: none;
  cursor: pointer;
}

textarea {
  overflow: auto;
  width: 95%;
  height: 150px;
  margin-top: 10px;
  max-width: 90%;
  height: 100%;
}

.textarea-container {
  display: flex;
  flex-direction: column;
}

#startCommandBtn {
  align-self: flex-end;
}

.box_mismatch {
  outline: 5px solid rgb(255, 0, 0);
  /* Adjust the border width as needed */
}


#customScriptModalHeaderContainer {
  display: flex;
  flex-direction: row;
  justify-content: space-around;
  align-items: center;
  margin-bottom: 10px;
}


// === FrontEnd\public\RegisterPage\register.html ===

<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Design by foolishdeveloper.com -->
    <title>Register</title>

    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="css/styles.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;600&display=swap" rel="stylesheet">
    <!--Stylesheet-->
</head>
<body>
    <div class="background">
        <div class="shape"></div>
        <div class="shape"></div>
    </div>
    <form id="registerForm"> <!-- Changed ID to registerForm -->
        <h3>Register Here</h3>
    
        <label for="username">Username</label>
        <input type="text" placeholder="Email" id="username" name="username">
    
        <label for="password">Password</label>
        <input type="password" placeholder="Password" id="password" name="password">
    
        <label for="confirmPassword">Confirm Password</label>
        <input type="password" placeholder="Confirm Password" id="confirmPassword" name="confirmPassword"> <!-- Updated ID and Name -->
    
        <button type="submit">Register</button>
        <button type="button" id="loginBtn">Login</button>
        <div class="social">
            <div class="go"><i class="fab fa-google"></i>  Google</div>
            <div class="fb"><i class="fab fa-facebook"></i>  Facebook</div>
        </div>
    </form>
    
    <script src="../scripts/config.js"></script>
    <script src="./register.js"></script> <!-- Make sure this path is correct -->
    </body>
</html>


// === FrontEnd\public\RegisterPage\register.js ===

document.getElementById('registerForm').addEventListener('submit', async (event) => {
    event.preventDefault(); // Prevent the form from submitting the traditional way
    
    const formData = new FormData(event.target);
    const email = formData.get('username'); // Assuming 'username' is the field name for email
    const password = formData.get('password');
    const confirmPassword = document.getElementById('confirmPassword').value;

    // Check if any of the fields are empty
    if (!email.trim() || !password.trim() || !confirmPassword.trim()) {
        alert('Please fill out all fields.');
        return; // Stop further execution if any field is empty
    }

    // Check if passwords match
    if (password !== confirmPassword) {
        alert('Passwords do not match. Please try again.');
        return; // Stop further execution if passwords do not match
    }

    const bodyData = { email, password };
    console.log('bodydata', bodyData);

    try {
        const response = await fetch(`http://${config.BACKEND_SERVER_IP}/register`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(bodyData)
        });

        // Check if the response is JSON
        const contentType = response.headers.get("content-type");
        if (contentType && contentType.indexOf("application/json") !== -1) {
            const responseData = await response.json(); // Safely parsing the JSON

            if (response.status === 202 && responseData.message === 'Sign-up request submitted. Please wait for administrator approval.') {
                alert('Sign-up request submitted. Please wait for administrator approval.');
                window.location.href = './login.html';
            } else {
                // Handle other server-side messages
                alert(responseData.message || 'Registration failed. Please try again.');
            }
        } else {
            // If response is not JSON
            const textResponse = await response.text();
            alert(textResponse || 'An unexpected error occurred.');
        }
    } catch (error) {
        console.error('There was an error:', error);
        alert('There was an error processing your registration. Please try again.');
    }
});

document.getElementById('loginBtn').addEventListener('click', function() {
    window.location.href = '../LoginPage/login.html'; // Navigate to login.html
});


// === FrontEnd\public\scripts\api.js ===

async function executeScript(ipsString, bashCode) {
    const executeScriptUrl = `http://${config.SSH_SERVER_IP}/execute-script`;
    try {
      const response = await fetch(executeScriptUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ ips: ipsString, script: bashCode }),
      });
      const data = await response.json();
      return data; // Return the JSON response
    } catch (error) {
      console.error("Error in executing script:", error);
      throw error; // Rethrow the error to handle it in the calling context
    }
  }
  
  async function updateMachineState(mappedArrayFormatted) {
    const updateStateUrl = `http://${config.BACKEND_SERVER_IP}/interact/update-machine-state`;
    try {
      const response = await fetch(updateStateUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(mappedArrayFormatted),
      });
      const data = await response.json();
      return data; // Return the JSON response
    } catch (error) {
      console.error("Error in updating machine state:", error);
      throw error; // Rethrow the error to handle it in the calling context
    }
  }

  async function fetchHardwareInfo() {
    const apiEndpoint = `http://${config.BACKEND_SERVER_IP}/interact/dc02-hardware-info`;
    const response = await fetch(apiEndpoint);
    if (!response.ok) {
      throw new Error(`Failed to fetch state: ${response.statusText}`);
    }
    return response.json();
  }

  async function loadBoxState() {
    const apiUrl = `http://${config.BACKEND_SERVER_IP}/interact/load-machine-state`;
  
    try {
      const response = await fetch(apiUrl);
      if (!response.ok) {
        throw new Error("Failed to fetch state");
      }
  
      const data = await response.json();
      // Assuming applyBoxState correctly handles the array structure of data
      if (Array.isArray(data)) {
        applyBoxState(data);
        
	    return data;
      } else console.error('data object is not an array:', data);
    } catch (error) {
      console.error("Error loading state:", error);
    }
  }
  
async function checkNH_Rigs() {
    // const apiEndpoint = `http://${config.SSH_SERVER_IP}/get-nh-rig-status`;
    const apiEndpoint = `http://localhost:5001/get-nh-rig-status`;
    const response = await fetch(apiEndpoint);
    if (!response.ok) {
      throw new Error(`Failed to fetch state: ${response.statusText}`);
    }
    rigs = await response.json();
    const rigsNotMining = rigs.filter(rig => rig.minerStatus !== 'MINING');
    console.log("Rigs Not Mining:", rigsNotMining);
}

checkNH_Rigs()

// === FrontEnd\public\scripts\auth.js ===

function isTokenExpired(token) {
    if (!token) return true;
  
    const base64Url = token.split('.')[1];
    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
    const payload = JSON.parse(atob(base64));
    const exp = payload.exp;
    const currentTime = Date.now() / 1000;
    console.log(exp, currentTime)
  
    return exp < currentTime;
  }
  
  function checkAndHandleTokenExpiration() {
    // USED FOR TESTING UNCOMMENT LINE BELOW FOR PRODUCTION
    const token = localStorage.getItem('token');
    if (!token || isTokenExpired(token)) {
      alert('Session expired. Please log in again.');
      localStorage.removeItem('token'); // Remove the expired or invalid token
      window.location.href = '/LoginPage/login.html';
      return true; // Indicate that the token has expired
    }
    return false; // Token is still valid
  }

  function parseJwt(token) {
    try {
      const base64Url = token.split('.')[1];
      const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
      return JSON.parse(window.atob(base64)).exp;
    } catch (error) {
      return null;
    }
  }

// === FrontEnd\public\scripts\config.js ===

// config.js
const config = {
  production: {
    BACKEND_SERVER: '10.10.250.101:3000',
    FRONTEND_SERVER: '10.10.250.101:5500',
    SSH_SERVER: '10.10.250.101:5000',
  },
  development: {
    BACKEND_SERVER: 'localhost:3000',
    FRONTEND_SERVER: 'localhost:5500',
    SSH_SERVER: 'localhost:5000',
  }
  };

  prod = config.production
  dev = config.development
   
  


// === FrontEnd\server.js ===

// CHECK IF COMPUTER OS IS COMPATIBLE
//////////////////////////////////////////////////
import checkOS from '../Utils/chk_os.js';

checkOS();

//////////////////////////////////////////////////

import config from '../Config/config.js';

checkOS();

import express from 'express';
import path from 'path';
const app = express();
import cors from 'cors';
import { fileURLToPath } from 'url';

app.use(cors()); // Enable CORS for all routes

// Get the directory name using import.meta.url
const __dirname = path.dirname(fileURLToPath(import.meta.url));
// Serve static files from the 'public' directory
app.use(express.static(path.join(__dirname, 'public')));
console.log('server.js dir:', path.join(__dirname, 'public'))

// Route to serve the home.html file
app.get('/', (req, res) => {
   // res.redirect('/LoginPage/login.html');
   res.redirect('/MachineControlPanelPage/machine-control-panel.html');
});


app.listen(config.FRONTEND_SERVER_PORT, () => {
    console.log(`Server started on port ${config.FRONTEND_SERVER_PORT}`);
});


// === processes.json ===

{
  "apps": [
    {
      "name": "backend",
      "script": "./server.js",
      "cwd": "./BackEnd",
      "watch": true
    },
    {
      "name": "frontend",
      "script": "./server.js",
      "cwd": "./FrontEnd",
      "watch": true
    },
    {
      "name": "ssh-server",
      "script": "./server.js",
      "cwd": "./SSH-Server",
      "watch": true
    }
  ]
}



// === SSH-Server\server.js ===

// CHECK IF COMPUTER OS IS COMPATIBLE
//////////////////////////////////////////////////
const checkOS = require('../Utils/chk_os.js');
checkOS();
//////////////////////////////////////////////////

const express = require('express');
const bodyParser = require('body-parser');
const { spawn } = require('child_process');
const cors = require('cors');
const { exec } = require('child_process');
const fs = require('fs').promises; // Import the fs module at the top of your script
const config = require('../Config/config.js')
const getNH_RigStatus = require('../SSH-Server/utils/nicehash_api.js');

const app = express();
app.use(express.json()); // For parsing application/json
const port = 5001;

// Middleware to parse JSON bodies
app.use(bodyParser.json());
app.use(cors()); // Enable CORS for all routes

// POST endpoint to execute the script
app.post('/execute-script', async (req, res) => {
    const { ips, script } = req.body;
    if (!ips || !script) {
        return res.status(400).send('IP addresses or script missing');
    }

    const scriptPath = '../BashScripts/execute_on_machines.sh';
    console.log('running ssh command');
    const childProcess = spawn('bash', [scriptPath, ips, script]);
    let rawData = ''; // Accumulate data here

    childProcess.stdout.on('data', (data) => {
        rawData += data.toString(); // Accumulate data as a string.
    });

    childProcess.on('close', (code) => {
        console.log(`child process exited with code ${code}`);

        // Directly parse the rawData as JSON
        try {
            let jsonOutput = JSON.parse(rawData);

            // Optionally, sort the JSON data by IP address numerically
            jsonOutput.sort((a, b) => {
                const ipSegmentsA = a.ip.split('.').map(Number);
                const ipSegmentsB = b.ip.split('.').map(Number);

                for (let i = 0; i < ipSegmentsA.length; i++) {
                    if (ipSegmentsA[i] < ipSegmentsB[i]) {
                        return -1;
                    } else if (ipSegmentsA[i] > ipSegmentsB[i]) {
                        return 1;
                    }
                }
                return 0;
            });

            // Define the filename for the output JSON file
            const outputFilename = './output.json';

            // Use fs.promises.writeFile to write the result to a JSON file in the current directory
            fs.writeFile(outputFilename, JSON.stringify(jsonOutput, null, 2), 'utf8')
              .then(() => {
                  console.log(`Output written to ${outputFilename}`);
                  res.json(jsonOutput); // Send the sorted JSON data back as the response
              })
              .catch((error) => {
                  console.error('Error writing file:', error);
                  res.status(500).json({ error: 'Error writing output file' });
              });

        } catch (error) {
            console.error('Error parsing JSON:', error, 'From rawData:', rawData);
            res.status(500).json({ error: 'Error parsing script output as JSON' });
        }
    });

    childProcess.stderr.on('data', (data) => {
        console.error(`stderr: ${data}`);
    });

    childProcess.on('error', (error) => {
        console.error(`exec error: ${error}`);
        res.status(500).json({ error: `Script execution error: ${error.message}` });
    });
});

app.get('/get-nh-rig-status', async (req, res) => {
    console.log('Received request on /get-nh-rig-status');
    const baseUrl = 'https://api2.nicehash.com/main/api/v2/mining/external/bc1qnp2jkflt6xvzt5nclzguhy44jkmmfh5869qn9d/rigs2';
    try {
      const allRigsDetails = await getNH_RigStatus(baseUrl);
      res.json(allRigsDetails);
      console.log(allRigsDetails);
    } catch (error) {
      console.error('An error occurred:', error);
      res.status(500).send('An error occurred while fetching NiceHash rig statuses.');
    }
  });


app.listen(config.SSH_SERVER_PORT, '0.0.0.0', () => {
    console.log(`Server started on port ${config.SSH_SERVER_PORT}`);
});



// === SSH-Server\tests\testAPI.js ===

const config = require('../../Config/config.js');
async function checkNH_Rigs() {
    const apiEndpoint = `http://localhost:5001/get-nh-rig-status`;
    const response = await fetch(apiEndpoint);
    if (!response.ok) {
      throw new Error(`Failed to fetch state: ${response.statusText}`);
    }
    rigs = await response.json();
    const rigsNotMining = rigs.filter(rig => rig.minerStatus !== 'MINING');
    console.log("Rigs Not Mining:", rigsNotMining);
}

checkNH_Rigs()

// === SSH-Server\utils\nicehash_api.js ===

const axios = require('axios');

async function fetchAllData(baseUrl, pageSize = 30) {
  let allRigsDetails = [];

  // Fetch only pages 0, 1, and 2
  for (let page = 0; page <= 2; page++) {
    const url = `${baseUrl}?page=${page}&size=${pageSize}&sort=NAME`;
    try {
      const response = await axios.get(url);
      const rigs = response.data.miningRigs || [];

      const rigsDetails = rigs.map(rig => {
        // Extracting workerName from mmv object as primary source for rig name
        let rigName = rig.v4?.mmv?.workerName;
        // Fallback: Attempt to parse rigName from omv array if not found or format not matched
        if (!rigName || !/a02\d{3}/.test(rigName)) {
          const userSetting = rig.v4?.omv?.find(setting => setting.id === 101); // Assuming ID 101 is for Worker name based on the data structure provided
          rigName = userSetting ? userSetting.value.stringValue : "Unknown Rig Name";
        }
        const minerStatus = rig.minerStatus;
        return { rigName, minerStatus };
      });

      allRigsDetails = allRigsDetails.concat(rigsDetails);

    } catch (error) {
      console.error('Error fetching data for page', page, ':', error);
      // Optionally break the loop if you don't want to attempt further requests after an error
      // break;
    }
  }

  return allRigsDetails;
}

module.exports = fetchAllData


// TESTS //

// const baseUrl = 'https://api2.nicehash.com/main/api/v2/mining/external/bc1qnp2jkflt6xvzt5nclzguhy44jkmmfh5869qn9d/rigs2';
// fetchAllData(baseUrl).then(allRigsDetails => {
//   console.log('Fetched all rigs details:', allRigsDetails, allRigsDetails.length);
//   // Now prints out the array of { rigName, minerStatus } objects
// }).catch(error => {
//   console.error('An error occurred:', error);
// });


// === Utils\chk_os.js ===

import os from 'os';

function checkOS() {
    // UNCOMMENT FOR DEBUGGING PURPOSES
    ////////////////////////////////////////
    return
    ////////////////////////////////////////
    const operatingSystem = os.type();
  
    if (operatingSystem === 'Linux') {
      console.log(`The operating system is: ${operatingSystem}`);
    } else {
      throw new Error('This script is only supported on Linux operating systems.');
    }
  }

export default checkOS

# === Utils\extractValFromCsv.py ===

import csv
import json
import os

def extract_and_save_json(input_dir, output_file):
    # This list will hold all the extracted data
    data_list = []
    
    # Iterate through every file in the directory
    for filename in os.listdir(input_dir):
        # Check if the file is a CSV
        if filename.endswith('.csv'):
            # Construct the full path to the file
            full_path = os.path.join(input_dir, filename)
            # Open and read the CSV file
            with open(full_path, mode='r', encoding='utf-8') as csv_file:
                csv_reader = csv.DictReader(csv_file)
                # Iterate through rows in the CSV file
                for row in csv_reader:
                    # Extract and format the required information
                    rig_data = {
                        row['Rig']: {
                            'MAC (NIC-1) enp031f6': row['MAC (NIC-1) enp031f6'],
                            'MAC (NIC-2) enp2s0': row['MAC (NIC-2) enp2s0'],
                            'IP': row['IP'],
                            'PDU IP': row['PDU IP'],
                            'PDU Port': row['PDU Port #'],
                        }
                    }
                    # Append the extracted data to the list
                    data_list.append(rig_data)
    
    # Write the extracted data to the specified JSON file
    with open(output_file, 'w', encoding='utf-8') as json_file:
        json.dump(data_list, json_file, indent=4)
        
def append_csv_to_json(csv_file_path, json_file_path):
    data_list = []
    # Read the existing JSON file first, if it exists
    if os.path.exists(json_file_path):
        with open(json_file_path, 'r', encoding='utf-8') as json_file:
            data_list = json.load(json_file)
    
    # Open and read the CSV file
    with open(csv_file_path, mode='r', encoding='utf-8') as csv_file:
        csv_reader = csv.DictReader(csv_file)
        # Iterate through rows in the CSV file
        for row in csv_reader:
            # Extract and format the required information, ignoring the 'OLD' columns
            rig_data = {
                row['Rig']: {
                    'MAC (NIC-1) enp031f6': row['MAC (NIC-1) enp031f6'],
                    'MAC (NIC-2) enp2s0': row['MAC (NIC-2) enp2s0'],
                    'IP': row['IP'],
                    'PDU IP': row['PDU IP'],
                    'PDU Port': row['PDU Port #'],
                }
            }
            # Append the extracted data to the list
            data_list.append(rig_data)
    
    # Write the updated data list to the JSON file
    with open(json_file_path, 'w', encoding='utf-8') as json_file:
        json.dump(data_list, json_file, indent=4)
        
def reorder_json_by_ip(input_path, output_path):
    with open(input_path, 'r', encoding='utf-8') as input_file:
        data = json.load(input_file)
    
    # Custom sorting function to sort by IP address
    def ip_key(item):
        return [int(octet) for octet in item['IP'].split('.')]
    
    # Sorting the data based on IP address
    sorted_data = sorted(data, key=ip_key)

    with open(output_path, 'w', encoding='utf-8') as output_file:
        json.dump(sorted_data, output_file, indent=4)

# Example usage
# extract_and_save_json('../DC02_MACHINE_HARDWARE', 'DC02_HARDWARE_INFO.json')

# Path to the CSV file and the output JSON file
# csv_file_path = '../DC02_GPU_Hardware_Software_Research - B2_Status.csv'
# json_file_path = './DC02_HARDWARE_INFO.json'

# # Append data from the new CSV file to the existing JSON file
# append_csv_to_json(csv_file_path, json_file_path)

input_path = './DC02_HARDWARE_INFO.json'
output_path = 'DC02_HARDWARE_INFO_SORTED.json'

# This is a placeholder since I can't directly run file operations that access the file system here.
# You would replace 'input.json' and 'sorted_output.json' with your actual input and output file paths and run this function in your local environment.
reorder_json_by_ip(input_path, output_path)

// === Utils\utils.js ===

function generateIdFromIp(ip) {
    const octets = ip.split('.').map(Number);
    if (octets.length !== 4) {
      throw new Error('Invalid IP address format');
    }
  
    const [network1, network2, thirdOctet, machineNumber] = octets;
  
    // Determine if third octet is in the specified range for Section A
    const sectionARange = [11, 12, 13, 14, 21, 22, 23, 24, 25];
    const sectionBRange = [111, 112, 113, 121, 122, 123, 124, 125];
    let section;
    if (sectionARange.includes(thirdOctet)) {
      section = 'A';
    } else if (sectionBRange.includes(thirdOctet)) {
      section = 'B';
    } else {
      section = 'Unknown';
    }
  
    // Determine the number based on the range of the third octet
    let number;
    if ((thirdOctet >= 10 && thirdOctet <= 19) || (thirdOctet >= 100 && thirdOctet <= 109)) {
      number = 1;
    } else if ((thirdOctet >= 20 && thirdOctet <= 29) || (thirdOctet >= 120 && thirdOctet <= 129)) {
      number = 2;
    } else {
      number = 'Unknown'; // Placeholder, adjust as needed
    }
  
    // Construct the ID
    const id = `${section}${number}${thirdOctet}${machineNumber}`;
    return id;
  }
  
  module.exports = {
    generateIdFromIp
  }
