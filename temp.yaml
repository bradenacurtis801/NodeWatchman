COMPUTED VALUES:
additionalArguments:
  - "--serversTransport.insecureSkipVerify=true"
  - "--log.leveL=DEBUG"
additionalVolumeMounts: []
affinity: {}
autoscaling:
  enabled: false
certResolvers: {}
commonLabels: {}
deployment:
  additionalContainers: []
  additionalVolumes: []
  annotations: {}
  dnsConfig: {}
  enabled: true
  imagePullSecrets: []
  initContainers: []
  kind: Deployment
  labels: {}
  lifecycle: {}
  minReadySeconds: 0
  podAnnotations: {}
  podLabels: {}
  replicas: 3
  runtimeClassName: null
  shareProcessNamespace: false
  terminationGracePeriodSeconds: 60
env:
- name: POD_NAME
  valueFrom:
    fieldRef:
      fieldPath: metadata.name
- name: POD_NAMESPACE
  valueFrom:
    fieldRef:
      fieldPath: metadata.namespace
envFrom: []
experimental:
  kubernetesGateway:
    enabled: false
  plugins: {}
extraObjects: []
globalArguments:
- "--global.checknewversion=false"
- "--global.sendanonymoususage=false"
hostNetwork: false
image:
  pullPolicy: IfNotPresent
  registry: docker.io
  repository: traefik
  tag: ""
ingressClass:
  enabled: true
  isDefaultClass: true
ingressRoute:
  dashboard:
    enabled: false
livenessProbe:
  failureThreshold: 3
  initialDelaySeconds: 2
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 2
logs:
  access:
    enabled: false
    fields:
      general:
        defaultmode: keep
        names: {}
      headers:
        defaultmode: drop
        names: {}
    filters: {}
  general:
    level: ERROR
metrics:
  prometheus:
    entryPoint: metrics
nodeSelector: {}
persistence:
  accessMode: ReadWriteOnce
  annotations: {}
  enabled: false
  name: data
  path: /data
  size: 128Mi
podDisruptionBudget:
  enabled: false
podSecurityContext:
  fsGroupChangePolicy: OnRootMismatch
  runAsGroup: 65532
  runAsNonRoot: true
  runAsUser: 65532
podSecurityPolicy:
  enabled: false
ports:
  metrics:
    expose: false
    exposeInternal: false
    exposedPort: 9100
    port: 9100
    protocol: TCP
  traefik:
    expose: false
    exposeInternal: false
    exposedPort: 9000
    port: 9000
    protocol: TCP
  web:
    redirectTo: 
      port: websecure
  websecure:
    tls:
      enabled: true
priorityClassName: ""
providers:
  kubernetesCRD:
    enabled: true
    ingressClass: traefik-test
  kubernetesIngress:
    enabled: true
    publishedService:
      enabled: false
rbac:
  enabled: true

readinessProbe:
  failureThreshold: 1
  initialDelaySeconds: 2
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 2
resources: {}
securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
service:
  enabled: true
  type: LoadBalancer
  annotations:
    traefik.ingress.kubernetes.io/service-loadbalancer-ip: "10.10.50.101"
    traefik.ingress.kubernetes.io/service-loadbalancer-source-range: ""
    traefik.ingress.kubernetes.io/service-external-ip: ""
    metallb.universe.tf/address-pool: traefik-pool
  labels: {}
  spec: 
    loadBalancerIp: 10.10.50.101
    loadBalancerSourceRanges: []
    externalIPs: []
serviceAccount:
  name: ""
serviceAccountAnnotations: {}
startupProbe: null
tlsOptions: {}
tlsStore: {}
tolerations: []
topologySpreadConstraints: []
tracing: {}
updateStrategy:
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 0
  type: RollingUpdate
volumes: []
